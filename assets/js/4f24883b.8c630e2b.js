"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[2281],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,f=m["".concat(d,".").concat(c)]||m[c]||s[c]||o;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i="MapView",l={unversionedId:"react-native-course/extra/map-view",id:"react-native-course/extra/map-view",title:"MapView",description:"react-native-maps zorgt voor een interactieve kaart in React Native. We kunnen hiermee een kaart tonen en markers op de kaart plaatsen.",source:"@site/docs/react-native-course/extra/map-view.md",sourceDirName:"react-native-course/extra",slug:"/react-native-course/extra/map-view",permalink:"/react-native-course/extra/map-view",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"reactNative",previous:{title:"Location",permalink:"/react-native-course/extra/location"},next:{title:"Platform Specific Code",permalink:"/react-native-course/extra/platform-specific-code"}},d={},p=[{value:"Installatie",id:"installatie",level:2},{value:"Gebruik",id:"gebruik",level:2},{value:"Markers",id:"markers",level:2},{value:"Meer informatie",id:"meer-informatie",level:2}],u={toc:p};function s(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mapview"},"MapView"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-maps")," zorgt voor een interactieve kaart in React Native. We kunnen hiermee een kaart tonen en markers op de kaart plaatsen. "),(0,r.kt)("h2",{id:"installatie"},"Installatie"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-maps")," is een externe library die we moeten installeren. We kunnen dit doen met de ",(0,r.kt)("inlineCode",{parentName:"p"},"expo install")," commando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx expo install react-native-maps\n")),(0,r.kt)("h2",{id:"gebruik"},"Gebruik"),(0,r.kt)("p",null,"Om heel eenvoudig een kaart te tonen in React Native moeten we de ",(0,r.kt)("inlineCode",{parentName:"p"},"MapView")," component gebruiken. Deze component heeft een ",(0,r.kt)("inlineCode",{parentName:"p"},"region")," prop die we kunnen gebruiken om de initiele regio van de kaart te bepalen. We willen deze dynamisch maken, dus we zullen de ",(0,r.kt)("inlineCode",{parentName:"p"},"region")," prop binden aan een state variabele."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"latitudeDelta")," en ",(0,r.kt)("inlineCode",{parentName:"p"},"longitudeDelta")," bepalen hoeveel van de kaart we willen tonen. Hoe kleiner deze waarden, hoe meer van de kaart we zien. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"react-native-maps"}',expo:'{"dependencies":"react-native-maps"}'},'import React, { useState } from "react";\nimport { View, Text, Button } from "react-native";\nimport MapView, { Region, Coordinate } from "react-native-maps";\n//hide-start\ninterface WorldWonder {\n  name: string;\n  latitude: number;\n  longitude: number;\n}\n\nconst worldWonders: WorldWonder[] = [\n  { name: "AP Hogeschool", latitude: 51.2167, longitude: 4.4167 },\n  { name: "Great Pyramid of Giza", latitude: 29.9792, longitude: 31.1344 },\n  { name: "Hanging Gardens of Babylon", latitude: 32.5317, longitude: 44.428 },\n  { name: "Colossus of Rhodes", latitude: 36.4404, longitude: 28.2241 },\n  { name: "Lighthouse of Alexandria", latitude: 31.2156, longitude: 29.9553 },\n  { name: "Statue of Zeus at Olympia", latitude: 37.6381, longitude: 21.6203 },\n  { name: "Temple of Artemis", latitude: 37.951, longitude: 27.3683 },\n  { name: "Mausoleum at Halicarnassus", latitude: 37.0372, longitude: 27.4251 },\n];\n//hide-end\nconst App = () => {\n  let [wonder, setWonder] = useState<WorldWonder>(worldWonders[0]);\n\n  const showRandomWonder = () => {\n    let randomIndex = Math.floor(Math.random() * worldWonders.length);\n    setWonder(worldWonders[randomIndex]);\n  };\n  return (\n    <View style={{ flex: 1 }}>\n      <MapView\n        style={{ flex: 1 }}\n        region={{\n          latitude: wonder.latitude,\n          longitude: wonder.longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421,\n        }}\n      />\n      <Button title="Set random location" onPress={showRandomWonder} />\n    </View>\n  );\n};\n\nexport default App;\n')),(0,r.kt)("h2",{id:"markers"},"Markers"),(0,r.kt)("p",null,"We kunnen markers op de kaart plaatsen door de ",(0,r.kt)("inlineCode",{parentName:"p"},"Marker")," component te gebruiken. Deze component heeft een ",(0,r.kt)("inlineCode",{parentName:"p"},"coordinate")," prop die we kunnen gebruiken om de positie van de marker te bepalen. We gaan in volgend voorbeeld een marker plaatsen op de kaart per wereldwonder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"react-native-maps"}',expo:'{"dependencies":"react-native-maps"}'},'import React, { useState } from "react";\nimport { View, Text, Button } from "react-native";\nimport MapView, { Region, Coordinate } from "react-native-maps";\n//hide-start\ninterface WorldWonder {\n  name: string;\n  latitude: number;\n  longitude: number;\n}\n\nconst worldWonders: WorldWonder[] = [\n  { name: "AP Hogeschool", latitude: 51.2167, longitude: 4.4167 },\n  { name: "Great Pyramid of Giza", latitude: 29.9792, longitude: 31.1344 },\n  { name: "Hanging Gardens of Babylon", latitude: 32.5317, longitude: 44.428 },\n  { name: "Colossus of Rhodes", latitude: 36.4404, longitude: 28.2241 },\n  { name: "Lighthouse of Alexandria", latitude: 31.2156, longitude: 29.9553 },\n  { name: "Statue of Zeus at Olympia", latitude: 37.6381, longitude: 21.6203 },\n  { name: "Temple of Artemis", latitude: 37.951, longitude: 27.3683 },\n  { name: "Mausoleum at Halicarnassus", latitude: 37.0372, longitude: 27.4251 },\n];\n//hide-end\nconst App = () => {\n  let [wonder, setWonder] = useState<WorldWonder>(worldWonders[0]);\n\n  const showRandomWonder = () => {\n    let randomIndex = Math.floor(Math.random() * worldWonders.length);\n    setWonder(worldWonders[randomIndex]);\n  };\n  return (\n    <View style={{ flex: 1 }}>\n      <MapView\n        style={{ flex: 1 }}\n        region={{\n          latitude: wonder.latitude,\n          longitude: wonder.longitude,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421,\n        }}\n      >\n        {worldWonders.map((wonder) => (\n          <MapView.Marker\n            key={wonder.name}\n            coordinate={{\n              latitude: wonder.latitude,\n              longitude: wonder.longitude,\n            }}\n            title={wonder.name}\n          />\n        ))}\n      </MapView>\n      <Button title="Set random location" onPress={showRandomWonder} />\n    </View>\n  );\n};\n\nexport default App;\n')),(0,r.kt)("h2",{id:"meer-informatie"},"Meer informatie"),(0,r.kt)("p",null,"Voor meer informatie over ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-maps")," kan je de ",(0,r.kt)("a",{parentName:"p",href:"https://docs.expo.dev/versions/latest/sdk/map-view/"},"documentatie")," raadplegen."))}s.isMDXComponent=!0}}]);