"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[4302],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},40799:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"wf-course/react/componenten/opsplitsen","title":"Folder structuur","description":"Tot nu toe stond al onze React code in het App.tsx bestand. Zelfs al hadden we meerdere componenten dan zaten die ook allemaal in dit bestand vervat. Als alle code in hetzelfde bestand staat, is het moeilijk om de code terug te vinden die op een gegeven moment belangrijk is. Bovendien is het dan ook niet mogelijk \xe9\xe9n component te herbruiken zonder de code van andere componenten over te nemen.","source":"@site/docs/wf-course/react/componenten/opsplitsen.md","sourceDirName":"wf-course/react/componenten","slug":"/wf-course/react/componenten/opsplitsen","permalink":"/webframeworks-cursus/wf-course/react/componenten/opsplitsen","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"wfCourse","previous":{"title":"Props","permalink":"/webframeworks-cursus/wf-course/react/componenten/props"},"next":{"title":"Styling","permalink":"/webframeworks-cursus/wf-course/react/componenten/stylen"}}');var r=t(74848),o=t(28453);const a={sidebar_position:1},i="Folder structuur",d={},c=[{value:"Aparte bestanden per component",id:"aparte-bestanden-per-component",level:2},{value:"Van component files naar React folders",id:"van-component-files-naar-react-folders",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"folder-structuur",children:"Folder structuur"})}),"\n",(0,r.jsxs)(n.p,{children:["Tot nu toe stond al onze React code in het ",(0,r.jsx)(n.code,{children:"App.tsx"})," bestand. Zelfs al hadden we meerdere componenten dan zaten die ook allemaal in dit bestand vervat. Als alle code in hetzelfde bestand staat, is het moeilijk om de code terug te vinden die op een gegeven moment belangrijk is. Bovendien is het dan ook niet mogelijk \xe9\xe9n component te herbruiken zonder de code van andere componenten over te nemen."]}),"\n",(0,r.jsx)(n.p,{children:"In React zijn componenten niet gekoppeld aan een specifieke bestandenstructuur. Toch zijn er bepaalde, veel toegepaste, afspraken. Deze worden hier toegelicht."}),"\n",(0,r.jsx)(n.h2,{id:"aparte-bestanden-per-component",children:"Aparte bestanden per component"}),"\n",(0,r.jsxs)(n.p,{children:["Een eerste verbetering bestaat erin elke component in een eigen bestand te plaatsen. Componenten kunnen dan op dezelfde manier ge\xefmporteerd worden als andere functies. Indien er bijvoorbeeld componenten ",(0,r.jsx)(n.code,{children:"App"}),", ",(0,r.jsx)(n.code,{children:"Header"}),", ",(0,r.jsx)(n.code,{children:"List"})," en ",(0,r.jsx)(n.code,{children:"ListItem"})," zijn, worden deze ondergebracht in ",(0,r.jsx)(n.code,{children:"App.tsx"}),", ",(0,r.jsx)(n.code,{children:"List.tsx"})," en ",(0,r.jsx)(n.code,{children:"ListItem.tsx"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"We bekomen een structuur die er als volgt uitziet:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"- src\n--- App.tsx\n--- List.tsx\n--- ListItem.tsx\n--- types.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"Het bestand List.tsx ziet er dan als volgt uit:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react-split-files", "filename": "src/List.tsx"}',children:'import ListItem from "./ListItem";\nimport { Game } from "./types";\n\ninterface ListProps {\n    games: Game[]\n}\n\nconst List = ({games}: ListProps) => {\n  return (\n    <div>\n    {games.map((game: Game) => {\n        return <ListItem key={game.id} game={game}/>\n      })}\n    </div>\n  );\n}\n\nexport default List;\n'})}),"\n",(0,r.jsx)(n.p,{children:"We zorgen met de laatste lijn dat we de List component exporteren zodat andere bestanden die kunnen importeren. Je ziet hierboven ook hoe dat importeren in zijn werk zal gaan. Je ziet dat hier het keyword default bij de export wordt gezet. Dit is nodig zodat je de componenten kan importeren op de volgende manier."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import ListItem from "./ListItem";\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Soms zie je ook de syntax met "," in de import. Dit wil zeggen dat er meerdere functies, variabelen,... worden ge\xebxporteerd in een bestand. Een goed voorbeeld hiervan is een nieuw bestand dat we hebben aangemaakt voor alle types in te beschrijven. We hebben alle types die met het model te maken hebben in 1 bestand gezet: ",(0,r.jsx)(n.code,{children:"types.ts"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Op dit moment staat daar  1 interface in, maar het is uiteraard niet ondenkbaar dat daar meerdere interfaces zullen zitten. We exporteren dus elke interface apart."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react-split-files", "filename": "src/types.ts"}',children:"export interface Game {\n  id?: number\n  name: string,\n  releaseYear: number,\n  sales: number\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"van-component-files-naar-react-folders",children:"Van component files naar React folders"}),"\n",(0,r.jsx)(n.p,{children:"Naarmate een project groeit, worden componenten complexer. Er worden styles en tests  toegevoegd. Je zou de vorige structuur kunnen blijven volgen en deze bestanden naast de component bestanden plaatsen. Vaak worden deze bestanden ook nog in een folder components geplaatst om het onderscheid te maken met andere code.\nDe bestandenstructuur ziet er dan bijvoorbeeld zo uit:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src\n\u2514\u2500\u2500 components\n    \u251c\u2500\u2500 App.css\n    \u251c\u2500\u2500 App.test.tsx\n    \u251c\u2500\u2500 App.tsx\n    \u251c\u2500\u2500 List.css\n    \u251c\u2500\u2500 List.test.tsx\n    \u2514\u2500\u2500 List.tsx\n"})}),"\n",(0,r.jsx)(n.p,{children:"Op termijn is deze aanpak niet houdbaar. Daarom verkiest men bij grotere projecten vaak \xe9\xe9n directory per component, als volgt:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src\n\u2514\u2500\u2500 components\n    \u251c\u2500\u2500 App\n    \u2502\xa0\xa0 \u251c\u2500\u2500 App.css\n    \u2502\xa0\xa0 \u251c\u2500\u2500 App.test.tsx\n    \u2502\xa0\xa0 \u2514\u2500\u2500 App.tsx\n    \u2514\u2500\u2500 List\n        \u251c\u2500\u2500 List.css\n        \u251c\u2500\u2500 List.test.tsx\n        \u2514\u2500\u2500 List.tsx\n"})}),"\n",(0,r.jsx)(n.p,{children:"De bestandsnamen in dit voorbeeld zijn zuiver ter illustratie. Afhankelijk van het gebruikte test framework, de techniek om componenten te stylen enzovoort kunnen er andere afspraken gevolgd worden. Hoe dan ook staan folders toe tijdens het ontwikkelen niet-relevante bestanden te verbergen."}),"\n",(0,r.jsx)(n.p,{children:"In sommige gevallen horen componenten sterk samen. In het voorbeeld bovenaan deze pagina werd gebruikt gemaakt van ListItem. Deze wordt enkel gebruikt als onderdeel van de List component. Meestal worden zo'n componenten samen in \xe9\xe9n folder geplaatst, als volgt:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src\n\u2514\u2500\u2500 components\n    \u251c\u2500\u2500 App\n    \u2502\xa0\xa0 \u251c\u2500\u2500 App.css\n    \u2502\xa0\xa0 \u251c\u2500\u2500 App.test.tsx\n    \u2502\xa0\xa0 \u2514\u2500\u2500 App.tsx\n    \u2514\u2500\u2500 List\n        \u251c\u2500\u2500 List.css\n        \u251c\u2500\u2500 List.test.tsx\n        \u251c\u2500\u2500 List.tsx\n        \u251c\u2500\u2500 ListItem.css\n        \u251c\u2500\u2500 ListItem.test.tsx\n        \u2514\u2500\u2500 ListItem.tsx\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);