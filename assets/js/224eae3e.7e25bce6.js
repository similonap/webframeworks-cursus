"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[8816],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5998:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:7},i="Controlled Components",l={unversionedId:"react-native-course/controlled-components/README",id:"react-native-course/controlled-components/README",title:"Controlled Components",description:"Net zoals in React.js gebruiken we in React Native ook state om de waarde van een input te beheren. We kunnen dit doen door een useState hook te gebruiken. We gebruiken dan de change handlers om deze state te updaten.",source:"@site/docs/react-native-course/controlled-components/README.md",sourceDirName:"react-native-course/controlled-components",slug:"/react-native-course/controlled-components/",permalink:"/webframeworks-cursus/react-native-course/controlled-components/",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"reactNative",previous:{title:"Lijsten",permalink:"/webframeworks-cursus/react-native-course/lists-and-keys/"},next:{title:"Routing en navigatie",permalink:"/webframeworks-cursus/react-native-course/navigation/"}},s={},p=[{value:"TextInput",id:"textinput",level:2},{value:"TextInput met getallen",id:"textinput-met-getallen",level:2},{value:"Button",id:"button",level:2},{value:"Switch",id:"switch",level:2},{value:"Conditioneel renderen",id:"conditioneel-renderen",level:2},{value:"ActivityIndicator",id:"activityindicator",level:2},{value:"FlatList refreshing",id:"flatlist-refreshing",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"controlled-components"},"Controlled Components"),(0,o.kt)("p",null,"Net zoals in React.js gebruiken we in React Native ook ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," om de waarde van een input te beheren. We kunnen dit doen door een ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook te gebruiken. We gebruiken dan de change handlers om deze state te updaten."),(0,o.kt)("p",null,"We geven in dit onderdeel een aantal voorbeelden van core components en hoe we deze kunnen gebruiken in samenwerking met ",(0,o.kt)("inlineCode",{parentName:"p"},"state"),". "),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Zorg altijd voor een state voor elk element waar je invoer kan ingeven. Ook al lijkt het in eerste instantie niet nodig.")),(0,o.kt)("h2",{id:"textinput"},"TextInput"),(0,o.kt)("p",null,"Om een TextInput een controlled component te maken, moeten we de ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," property meegeven aan de ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component. We moeten ook een ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," handler meegeven om de state te updaten."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},"import React, {useState} from 'react';\nimport {View, TextInput, Button, Alert, Text} from 'react-native';\n\nconst App = () => {\n    const [text, setText] = useState(\"\");\n\n    return (\n        <View style={{flexDirection: \"column\", flex: 1, marginTop: 40}}>\n            <TextInput\n                style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n                onChangeText={text => setText(text)}\n                value={text}\n            />\n            <Text>You typed: {text}</Text>\n            <Button title=\"Show Value\" onPress={() => { Alert.alert(text); }}/>\n        </View>\n    )\n}\n\nexport default App;\n")),(0,o.kt)("p",null,"Het is ook mogelijk om meerdere componenten aan 1 state te binden. In dit voorbeeld binden we 2 ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," componenten aan 1 state. Beide zullen up to date blijven bij de huidige waarde van de state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},"import React, {useState} from 'react';\nimport {View, TextInput, Button, Alert, Text} from 'react-native';\n\nconst App = () => {\n    const [text, setText] = useState(\"\");\n\n    return (\n        <View style={{flexDirection: \"column\", flex: 1, marginTop: 40}}>\n            <TextInput\n                style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n                onChangeText={text => setText(text)}\n                value={text}\n            />\n            <TextInput\n                style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n                onChangeText={text => setText(text)}\n                value={text}\n            />\n        </View>\n    )\n}\n\nexport default App;\n")),(0,o.kt)("h2",{id:"textinput-met-getallen"},"TextInput met getallen"),(0,o.kt)("p",null,"Als we een ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component willen gebruiken om getallen in te geven, moeten we de ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboardType")," property meegeven aan de ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component. Niet alle keyboards in Android hebben een numeriek keyboard. Dus de gebruiker kan nog steeds niet numerieke waarden ingeven. "),(0,o.kt)("p",null,"De beste manier om dit op te lossen is toch een string als state te gebruiken en deze te converteren naar een numerieke waarde wanneer we deze nodig hebben."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React, {useState} from \'react\';\nimport {View, TextInput, Button, Alert, Text} from \'react-native\';\n\nconst App = () => {\n    const [number, setNumber] = useState("0");\n\n    const validateAndMultiply = () => {\n      if (isNaN(number)) {\n        Alert.alert("This is not a number!");\n        setNumber("0");\n      } else {\n        setNumber((parseInt(number) * 2).toString())\n      }\n    }\n\n    return (\n        <View style={{flexDirection: "column", flex: 1, marginTop: 40}}>\n            <TextInput\n                keyboardType="number-pad"\n                style={{height: 40, borderColor: \'gray\', borderWidth: 1}}\n                onChangeText={text => setNumber(text)}\n                value={number}\n            />\n            <Button title="Multiply" onPress={validateAndMultiply}/>\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"button"},"Button"),(0,o.kt)("p",null,"We kunnen ook een ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component gebruiken om de state te updaten. We kunnen dit doen door een ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," handler mee te geven aan de ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component. Buttons zijn geen controlled components."),(0,o.kt)("p",null,"We zullen in het onderstaande voorbeeld een teller tonen die we aan de hand van de Button kunnen verhogen."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},"import React, {useState} from 'react';\nimport {View, Button, Text} from 'react-native';\n\nconst App = () => {\n    const [counter, setCounter] = useState(0);\n\n    return (\n        <View style={{flexDirection: \"column\", flex: 1, marginTop: 40}}>\n            <Text>Counter: {counter}</Text>\n            <Button title=\"Increase Counter\" onPress={() => { setCounter(counter + 1); }}/>\n        </View>\n    )\n}\n\nexport default App;\n")),(0,o.kt)("h2",{id:"switch"},"Switch"),(0,o.kt)("p",null,"Een ",(0,o.kt)("inlineCode",{parentName:"p"},"Switch")," component heeft een ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," property en een ",(0,o.kt)("inlineCode",{parentName:"p"},"onValueChange")," handler. We kunnen deze gebruiken om een ",(0,o.kt)("inlineCode",{parentName:"p"},"Switch")," component te maken die een controlled component is."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React, {useState} from \'react\';\n\nimport {View, Switch, Text} from \'react-native\';\n\nconst App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n\n    return (\n        <View style={{flexDirection: "column", flex: 1, marginTop: 40}}>\n            <Switch\n                onValueChange={() => setIsEnabled(previousState => !previousState)}\n                value={isEnabled}\n            />\n            <Text>Switch is {isEnabled ? "On" : "Off"}</Text>\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"conditioneel-renderen"},"Conditioneel renderen"),(0,o.kt)("p",null,"We kunnen ook conditioneel renderen in React Native. We gebruiken hier vooral de ",(0,o.kt)("inlineCode",{parentName:"p"},"&&")," operator voor of de ternary operator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React, {useState} from \'react\';\n\nimport {View, Switch, Text, Image} from \'react-native\';\n\nconst App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n\n    return (\n        <View style={{flexDirection: "column", flex: 1, marginTop: 40}}>\n            <Switch\n                onValueChange={() => setIsEnabled(previousState => !previousState)}\n                value={isEnabled}\n            />\n            {isEnabled ? <Image style={{width: 60, height: 60}} source={{uri: "https://raw.githubusercontent.com/Templarian/MaterialDesign/master/svg/alarm-light.svg"}}/>\n            :\n            <Image style={{width: 60, height: 60}} source={{uri: "https://raw.githubusercontent.com/Templarian/MaterialDesign/master/svg/alarm-light-off.svg"}}/>\n            }\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"activityindicator"},"ActivityIndicator"),(0,o.kt)("p",null,"Een ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," component heeft een ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," property en een ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," property. Meestal is de animating property afhankelijk van de waarde van een state. Als we bijvoorbeeld iets willen laden, dan zetten we de ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," property op ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," en als we klaar zijn met laden, dan zetten we de ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," property op ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React, {useState} from \'react\';\n\nimport {View, Button, Text, ActivityIndicator} from \'react-native\';\n\ninterface TimezoneInterface {\n    datetime: string;\n}\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [result, setResult] = useState("");\n\n    const loadData = async() => {\n    \n        setLoading(true);\n        \n        let result = await fetch("https://worldtimeapi.org/api/timezone/Europe/Brussels");\n        let json : TimezoneInterface = await result.json();\n\n        setResult(json.datetime);\n\n        setLoading(false);\n    }\n\n    return (\n        <View style={{flexDirection: "column", flex: 1, marginTop: 40}}>\n            <Button title="Load data" onPress={() => loadData() }/>\n            <ActivityIndicator animating={loading}/>\n            <Text>{result}</Text>\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"flatlist-refreshing"},"FlatList refreshing"),(0,o.kt)("p",null,"Een ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component heeft een ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," property en een ",(0,o.kt)("inlineCode",{parentName:"p"},"onRefresh")," handler. We kunnen deze gebruiken om een ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component te maken die een pull to refresh heeft. Hiervoor moeten we de refreshing state bijhouden en deze updaten wanneer de gebruiker de lijst heeft gerefreshed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},"import React, {useState} from 'react';\n\nimport {View, FlatList, Text} from 'react-native';\n\nconst generateRandomColors = (amount: number) => {\n    let colors : string[] = [];\n    for (let i = 0; i < amount; i++) {\n        colors.push(\"#\" + Math.floor(Math.random()*16777215).toString(16));\n    }\n    return colors;\n}\n\nconst App = () => {\n    const [colors, setColors] = useState(generateRandomColors(10));\n    const [refreshing, setRefreshing] = useState(false);\n\n    const refreshColors = async() => {\n        setRefreshing(true);\n        // wait 2 seconds to simulate API call (or whatever)\n        await new Promise((resolve, reject) => setTimeout(resolve, 2000));\n        setColors(generateRandomColors(10));\n        setRefreshing(false);\n    }\n\n    return (\n        <View style={{flexDirection: \"column\", flex: 1, marginTop: 40}}>\n            <FlatList\n                data={colors}\n                renderItem={({item}) => <View style={{height: 100, backgroundColor: item}}/>}\n                keyExtractor={(item, index) => index.toString()}\n                refreshing={refreshing}\n                onRefresh={() => refreshColors()}\n            />\n        </View>\n    )\n}\n\nexport default App;\n")))}c.isMDXComponent=!0}}]);