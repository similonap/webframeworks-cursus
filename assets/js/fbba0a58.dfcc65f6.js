"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[3052],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=o,k=d["".concat(s,".").concat(u)]||d[u]||c[u]||a;return t?r.createElement(k,i(i({ref:n},m),{},{components:t})):r.createElement(k,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6483:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:6},i="Lijsten",l={unversionedId:"react-native-course/lists-and-keys/README",id:"react-native-course/lists-and-keys/README",title:"Lijsten",description:"Net zoals in React.js kunnen we ook in React Native lijsten maken. We kunnen dit doen door een array te maken en deze te mappen naar een component. We moeten wel een key meegeven aan elk element in de lijst. Deze key moet uniek zijn voor elk element in de lijst.",source:"@site/docs/react-native-course/lists-and-keys/README.md",sourceDirName:"react-native-course/lists-and-keys",slug:"/react-native-course/lists-and-keys/",permalink:"/webframeworks-cursus/react-native-course/lists-and-keys/",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"reactNative",previous:{title:"Custom Components",permalink:"/webframeworks-cursus/react-native-course/custom-components/"},next:{title:"Controlled Components",permalink:"/webframeworks-cursus/react-native-course/controlled-components/"}},s={},p=[{value:"Lijsten met for lus",id:"lijsten-met-for-lus",level:2},{value:"Lijsten met map",id:"lijsten-met-map",level:2},{value:"ScrollView",id:"scrollview",level:2},{value:"FlatList",id:"flatlist",level:2}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lijsten"},"Lijsten"),(0,o.kt)("p",null,"Net zoals in React.js kunnen we ook in React Native lijsten maken. We kunnen dit doen door een array te maken en deze te mappen naar een component. We moeten wel een key meegeven aan elk element in de lijst. Deze key moet uniek zijn voor elk element in de lijst."),(0,o.kt)("h2",{id:"lijsten-met-for-lus"},"Lijsten met for lus"),(0,o.kt)("p",null,"We kunnen een lijst maken door een for lus te gebruiken. We kunnen dan een array maken en deze opvullen met een for lus. We kunnen dan deze array mappen naar een component. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text} from \'react-native\';\n\nconst App = () => {\n    const names = ["Andie","Lotte","Liene","Hanna"];\n    let nameTexts : JSX.Element[] = [];\n\n    for (let name of names) {\n        nameTexts.push(<Text key={name}>{name}</Text>);\n    }\n\n    return (\n        <View style={{flexDirection: "column", flex: 1}}>\n            {nameTexts}\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Dit is niet hoe we lijsten maken in React Native. We gebruiken hiervoor de ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," functie. Zie volgende stuk")),(0,o.kt)("h2",{id:"lijsten-met-map"},"Lijsten met map"),(0,o.kt)("p",null,"De map functie is zeer handig om een lijst te maken. We kunnen een lijst maken door een array te maken en elk element te mappen naar een component. We moeten wel een key meegeven aan elk element in de lijst. Deze key moet uniek zijn voor elk element in de lijst. Dit gebeurt op dezelfde manier als in React.js."),(0,o.kt)("p",null,"Hieronder een voorbeeld dat een lijst van kleuren naar gekleurde views mapt. We gebruiken de kleurnamen hier als key maar let goed op dat dit niet altijd de beste keuze is. In dit geval is het wel ok omdat de kleuren uniek zijn."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text} from \'react-native\';\n\nconst colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];\n\nconst App = () => {\n    return (\n        <View style={{flexDirection: "column", alignItems: "stretch", flex: 1}}>\n            {colors.map(color => (\n                <View key={color} style={{flex:1 , backgroundColor: color}}/>\n            ))}\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"Je moet uiteraard niet altijd mappen naar views. Je kan ook mappen naar andere componenten. Hieronder een voorbeeld dat een lijst van kleuren naar ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," componenten mapt."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text} from \'react-native\';\n\nconst colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];\n\nconst App = () => {\n    return (\n        <View style={{flexDirection: "column", alignItems: "stretch", flex: 1}}>\n            {colors.map(color => (\n                <Text key={color} style={{flex:1 , backgroundColor: color, textAlign:"center"}}>{color}</Text>\n            ))}\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"Een extra voorbeeld:\nWe kunnen een woord opsplitsen naar een array van letters en deze dan apart tonen. We gebruiken hier de ",(0,o.kt)("inlineCode",{parentName:"p"},"split")," functie om een string te splitsen naar een array van letters. We gebruiken de index van het element om de fontSize te bepalen. We gebruiken een combinatie van de letter en de index als key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text} from \'react-native\';\n\nconst App = () => {\n    const word = "Hello";\n    return (\n        <View style={{flex: 1, flexDirection: "row"}}>\n            {word.split("").map((letter, index) => (\n                <Text key={letter + index} style={{flex:1 , fontSize: 20 + index * 10, textAlign:"center"}}>{letter}</Text>\n            ))}\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"scrollview"},"ScrollView"),(0,o.kt)("p",null,"Tot nu toe konden we alleen maar lijsten tonen die in de lengte van het scherm passen. Als we een lijst hebben die langer is dan het scherm, dan kunnen we deze niet tonen. We kunnen dit oplossen door een ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," te gebruiken. Een ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," is een component die een lijst kan tonen die langer is dan het scherm."),(0,o.kt)("p",null,"Als we bijvoorbeeld de elementen iets groter maken dan zie je direct het probleem:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text} from \'react-native\';\n\nconst colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];\n\nconst App = () => {\n    return (\n        <View style={{flex: 1, alignItems: "stretch"}}>\n          {colors.map(color => (\n              <View key={color} style={{height: 200, backgroundColor: color}}/>\n          ))}\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"We kunnen hier eenvoudig een ScrollView rondzetten om dit probleem op te lossen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text, ScrollView} from \'react-native\';\n\nconst colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];\n\nconst App = () => {\n    return (\n        <View>\n            <ScrollView>\n                <View style={{flex: 1, alignItems: "stretch"}}>\n                    {colors.map(color => (\n                        <View key={color} style={{height: 200, backgroundColor: color}}/>\n                    ))}\n                </View>\n            </ScrollView>\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("h2",{id:"flatlist"},"FlatList"),(0,o.kt)("p",null,"Een andere manier om een lijst te maken is door gebruik te maken van de ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component. Deze component heeft een aantal voordelen ten opzichte van de map functie. De ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component is een native component en zal dus sneller zijn dan een lijst die gemaakt wordt met de map functie. Daarnaast zal de ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component alleen de elementen renderen die op het scherm zichtbaar zijn. Dit is handig als je een lijst hebt met veel elementen. "),(0,o.kt)("p",null,"FlatList is automatisch scrollable dus hoeft niet in een ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," gezet te worden."),(0,o.kt)("p",null,"De ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component heeft een aantal props die we moeten meegeven. De ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop is de lijst die we willen tonen. De ",(0,o.kt)("inlineCode",{parentName:"p"},"renderItem")," prop is een functie die een item uit de lijst zal renderen. De ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor")," prop is een functie die een key zal teruggeven voor een item uit de lijst. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text, FlatList} from \'react-native\';\n\ninterface Person {\n    id: number;\n    name: string;\n    age: number;\n}\n\nconst persons : Person[] = [\n    {id: 1, name: "Andie", age: 25},\n    {id: 2, name: "Sven", age: 24},\n    {id: 3, name: "Dirk", age: 27},\n    {id: 4, name: "Lotte", age: 22},\n]\n\nconst PersonComponent = ({item} : {item: Person}) => {\n    return (\n        <View style={{flexDirection: "row", alignItems: "center"}}>\n            <Text style={{flex: 1}}>{item.name}</Text>\n            <Text style={{flex: 1}}>{item.age}</Text>\n        </View>\n    )\n}\n\nconst App = () => {\n    return (\n        <View style={{flex: 1, flexDirection: "column"}}>\n            <FlatList\n                data={persons}\n                renderItem={({item}) => <PersonComponent item={item}/>}\n                keyExtractor={item => item.id.toString()}\n            />\n        </View>\n    )\n}\n\nexport default App;\n')),(0,o.kt)("p",null,"We herdoen ook nog het voorbeeld van de kleuren maar dan met het ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from \'react\';\n\nimport {View, Text, FlatList} from \'react-native\';\n\nconst colors = ["red", "orange", "yellow", "green", "blue", "indigo", "violet"];\n\nconst App = () => {\n    return (\n        <View style={{flexDirection: "column", alignItems: "stretch", flex: 1}}>       \n            <FlatList\n                data={colors}\n                renderItem={({item}) => (\n                    <View style={{height: 200, backgroundColor: item}}/>\n                )}\n                keyExtractor={item => item}\n            />\n        </View>\n    )\n}\n\nexport default App;\n')))}c.isMDXComponent=!0}}]);