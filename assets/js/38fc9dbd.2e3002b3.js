"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[8568],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},630:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:4},i="Core Components",l={unversionedId:"react-native-course/core-components/README",id:"react-native-course/core-components/README",title:"Core Components",description:"Zoals we al gezien hebben kan er in React Native geen gebruik gemaakt worden van HTML elementen. In plaats daarvan gebruiken we React Native componenten. Deze componenten zijn gebaseerd op de HTML elementen, maar hebben een andere naam en werken anders. In deze sectie gaan we de meest gebruikte componenten bekijken.",source:"@site/docs/react-native-course/core-components/README.md",sourceDirName:"react-native-course/core-components",slug:"/react-native-course/core-components/",permalink:"/webframeworks-cursus/react-native-course/core-components/",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"reactNative",previous:{title:"Android Emulator",permalink:"/webframeworks-cursus/react-native-course/expo/emulator"},next:{title:"Flexbox",permalink:"/webframeworks-cursus/react-native-course/flexbox/"}},s={},p=[{value:"View",id:"view",level:2},{value:"StyleSheet",id:"stylesheet",level:2},{value:"Inline styles",id:"inline-styles",level:2},{value:"Text",id:"text",level:2},{value:"Text nesting",id:"text-nesting",level:3},{value:"Image",id:"image",level:2},{value:"Static image resources",id:"static-image-resources",level:3},{value:"Afbeeldingen van het internet",id:"afbeeldingen-van-het-internet",level:3},{value:"Styling",id:"styling",level:3},{value:"Resize mode",id:"resize-mode",level:3},{value:"TextInput",id:"textinput",level:2},{value:"Button",id:"button",level:2},{value:"Pressable",id:"pressable",level:2},{value:"Handling events",id:"handling-events",level:2},{value:"Button",id:"button-1",level:3},{value:"TextInput",id:"textinput-1",level:3},{value:"Pressable",id:"pressable-1",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"core-components"},"Core Components"),(0,r.kt)("p",null,"Zoals we al gezien hebben kan er in React Native geen gebruik gemaakt worden van HTML elementen. In plaats daarvan gebruiken we React Native componenten. Deze componenten zijn gebaseerd op de HTML elementen, maar hebben een andere naam en werken anders. In deze sectie gaan we de meest gebruikte componenten bekijken."),(0,r.kt)("h2",{id:"view"},"View"),(0,r.kt)("p",null,"De ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component is het meest gebruikte component in React Native. Het is een container component die andere componenten kan bevatten. De ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component is vergelijkbaar met de ",(0,r.kt)("inlineCode",{parentName:"p"},"div")," tag in HTML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Text>Hello World</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        paddingTop: Constants.statusBarHeight,\n        backgroundColor: "#fff",\n        alignItems: "center",\n        justifyContent: "center",\n    },\n});\n\nexport default App;\n')),(0,r.kt)("p",null,"Dezelfde app zou er in React.js als volgt uitzien:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import React from "react";\n\nconst App = () => {\n    return (\n        <div style={styles.container}>\n            <p>Hello World</p>\n        </div>\n    );\n}\n\nconst styles = {\n    container: {\n        display: "flex",\n        flex: 1,\n        height: "100vh",\n        width: "100vw",\n        backgroundColor: "#fff",\n        alignItems: "center",\n        justifyContent: "center",\n    },\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Je ziet dat deze twee componenten erg veel op elkaar lijken. De ",(0,r.kt)("inlineCode",{parentName:"p"},"View")," component is een container component die andere componenten kan bevatten. De ",(0,r.kt)("inlineCode",{parentName:"p"},"div")," tag in HTML is ook een container component die andere elementen kan bevatten. Een belangrijk verschil is dat alle Views by default flexbox containers zijn. Je hoeft dit niet expliciet aan te geven. In React.js moet je dit wel expliciet aangeven door de ",(0,r.kt)("inlineCode",{parentName:"p"},"display: flex")," property toe te voegen aan de ",(0,r.kt)("inlineCode",{parentName:"p"},"div")," tag."),(0,r.kt)("h2",{id:"stylesheet"},"StyleSheet"),(0,r.kt)("p",null,"Het ",(0,r.kt)("inlineCode",{parentName:"p"},"StyleSheet")," component is een object dat alle styling informatie bevat. In React.js wordt dit meestal gedaan met CSS. In React Native wordt dit gedaan in JavaScript. Het ",(0,r.kt)("inlineCode",{parentName:"p"},"StyleSheet")," component is een object dat alle styling informatie bevat. "),(0,r.kt)("p",null,"Een stylesheet kan je als volgt aanmaken:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <View style={styles.box}/>\n        </View>\n    );\n}\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Constants.statusBarHeight,\n    },\n    box: {\n        width: 100,\n        height: 100,\n        backgroundColor: "red",\n        borderWidth: 1,\n        borderColor: "black",\n        borderRadius: 10\n    }\n});\n\nexport default App;\n')),(0,r.kt)("p",null,"We maken hier een vierkant aan met een rode achtergrond. De ",(0,r.kt)("inlineCode",{parentName:"p"},"borderWidth")," property geeft aan hoe dik de rand van het vierkant moet zijn. De ",(0,r.kt)("inlineCode",{parentName:"p"},"borderColor")," property geeft aan welke kleur de rand moet hebben. De ",(0,r.kt)("inlineCode",{parentName:"p"},"borderRadius")," property geeft aan hoeveel de hoeken van het vierkant afgerond moeten worden. "),(0,r.kt)("p",null,"Merk op dat we hier gebruik maken van ",(0,r.kt)("inlineCode",{parentName:"p"},"Constants.statusBarHeight"),". Dit is een variabele die de hoogte van de statusbalk bevat. Zo kunnen we ervoor zorgen dat de app niet onder de statusbalk komt te staan."),(0,r.kt)("p",null,"Je kan nog meer styling properties toevoegen aan een View. Je kan deze hier vinden: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/view-style-props"},"https://reactnative.dev/docs/view-style-props"))),(0,r.kt)("h2",{id:"inline-styles"},"Inline styles"),(0,r.kt)("p",null,"Het is ook mogelijk rechstreeks in de style property van een View een object mee te geven. Dit is echter niet aan te raden. Het is beter om een stylesheet aan te maken en deze te gebruiken. Dit is beter voor de performance van je app. Inline styles zijn echter wel handig als je snel een style wilt testen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={{paddingTop: Constants.statusBarHeight}}>\n            <View style={{width: 100,height: 100, backgroundColor: "red",borderWidth: 1,borderColor: "black",borderRadius: 10}}/>\n        </View>\n    );\n}\n\nexport default App;\n')),(0,r.kt)("h2",{id:"text"},"Text"),(0,r.kt)("p",null,"De ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," component is een component die tekst kan weergeven. De ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," component is vergelijkbaar met de ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," tag in HTML."),(0,r.kt)("p",null,"Hieronder een aantal voorbeelden van veel voorkomende style properties"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.hello}>Hello World</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight },\n    hello: {\n        fontSize: 20,\n        fontWeight: "bold",\n        fontStyle: "italic",\n        textDecorationLine: "underline",\n        textAlign: "center",\n        color: "red"\n    }\n});\n\nexport default App;\n')),(0,r.kt)("p",null,"Meer informatie over de styling props van het ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," component kan je hier vinden:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/text-style-props"},"https://reactnative.dev/docs/text-style-props"))),(0,r.kt)("h3",{id:"text-nesting"},"Text nesting"),(0,r.kt)("p",null,"Het is mogelijk om een ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," component in een andere ",(0,r.kt)("inlineCode",{parentName:"p"},"Text")," component te nesten. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Text>Hello<Text style={styles.world}> World</Text></Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight },\n    world: { color: "blue", fontWeight: "bold" }\n});\n\nexport default App;\n')),(0,r.kt)("h2",{id:"image"},"Image"),(0,r.kt)("p",null,"Een Image is een react component om verschillende types van afbeeldingen te laten zien:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Afbeeldingen van het internet"),(0,r.kt)("li",{parentName:"ul"},"Static image resources"),(0,r.kt)("li",{parentName:"ul"},"Afbeeldingen van local storage (zoals fotos van de camera)")),(0,r.kt)("h3",{id:"static-image-resources"},"Static image resources"),(0,r.kt)("p",null,"De afbeeldingen komen mee in je project directory staan bij de source bestanden. Je kan deze afbeeldingen gebruiken door de ",(0,r.kt)("inlineCode",{parentName:"p"},"require")," functie te gebruiken. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'<Image source={require("./bunny.jpg")}/>\n')),(0,r.kt)("h3",{id:"afbeeldingen-van-het-internet"},"Afbeeldingen van het internet"),(0,r.kt)("p",null,"Je kan ook afbeeldingen van het internet gebruiken. Dit doe je door de ",(0,r.kt)("inlineCode",{parentName:"p"},"uri")," property te gebruiken. Images van het internet moeten altijd een width en een height style hebben."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View, Image } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Image\n                style={styles.image}\n                source={{\n                uri: "https://reactnative.dev/img/tiny_logo.png",\n            }}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight },\n    image: { width: 100, height: 100 }\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"styling"},"Styling"),(0,r.kt)("p",null,"Images zijn ook View objecten, dus je kan ze ook stylen."),(0,r.kt)("p",null,"Meer informatie over de styling props van het ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," component kan je hier vinden:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/image-style-props"},"https://reactnative.dev/docs/image-style-props"))),(0,r.kt)("h3",{id:"resize-mode"},"Resize mode"),(0,r.kt)("p",null,"De ",(0,r.kt)("inlineCode",{parentName:"p"},"resizeMode")," property kan je gebruiken om de manier waarop een image wordt weergegeven in het geval dat de afmetingen van de image niet overeenkomen met de afmetingen van de ",(0,r.kt)("inlineCode",{parentName:"p"},"Image")," component."),(0,r.kt)("p",null,"De volgende waarden zijn mogelijk:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"repeat")," - herhaalt de afbeelding"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contain")," - De afbeelding wordt zo groot mogelijk gemaakt, maar er wordt wel rekening gehouden met de aspect ratio van de afbeelding. De afbeelding wordt niet uitgerekt."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"center")," - De afbeelding wordt niet veranderd van grootte. De afbeelding wordt gecentreerd in de ",(0,r.kt)("inlineCode",{parentName:"li"},"Image")," component."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"stretch")," - De afbeelding wordt zo groot mogelijk gemaakt. Er wordt geen rekening gehouden met de aspect ratio van de afbeelding. De afbeelding wordt uitgerekt.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View, Image } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Image\n                style={styles.image}\n                source={{\n                uri: "https://reactnative.dev/img/tiny_logo.png",\n            }}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight },\n    image: { width: 150, height: 200, resizeMode: "center" }\n});\n\nexport default App;\n')),(0,r.kt)("h2",{id:"textinput"},"TextInput"),(0,r.kt)("p",null,"De ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," component is een component die gebruikt kan worden om tekst in te voeren. De ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," component is vergelijkbaar met de ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," tag in HTML."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View, TextInput } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <TextInput\n                secureTextEntry={false}\n                autoCapitalize="characters"\n                placeholder="Enter your name"\n                keyboardType="default"\n                style={styles.textinput}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight},\n    textinput: { borderColor: "red", borderWidth: 1}\n});\n\nexport default App;\n')),(0,r.kt)("p",null,"Meer informatie over de props van het ",(0,r.kt)("inlineCode",{parentName:"p"},"TextInput")," component kan je hier vinden:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactnative.dev/docs/textinput#props"},"https://reactnative.dev/docs/textinput#props"))),(0,r.kt)("h2",{id:"button"},"Button"),(0,r.kt)("p",null,"De ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component is een component die gebruikt kan worden om een button te maken. De ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component is vergelijkbaar met de ",(0,r.kt)("inlineCode",{parentName:"p"},"button")," tag in HTML."),(0,r.kt)("p",null,"Op beide platformen zal de button een native feel hebben en button heeft beperkte styling mogelijkheden."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Button, View} from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Button title="Hello World" color="green" disabled={false}/>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight }\n});\n\nexport default App;\n')),(0,r.kt)("h2",{id:"pressable"},"Pressable"),(0,r.kt)("p",null,"Zoals we hiervoor hebben vermeld is de ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component beperkt in styling mogelijkheden. Het Pressable component maakt het mogelijk andere Views te gebruiken als button. "),(0,r.kt)("p",null,"Zelfs als je een ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," component gebruikt, wordt er achter de schermen een ",(0,r.kt)("inlineCode",{parentName:"p"},"Pressable")," component gebruikt om de button te maken. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View, Pressable, Alert } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Pressable\n                style={styles.pressable}\n                onPress={() => {\n                    Alert.alert("Pressed!");\n                }}\n            >\n                <Text>Press Me</Text>\n            </Pressable>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight},\n    pressable: { backgroundColor: "red" }\n});\n\nexport default App;\n')),(0,r.kt)("p",null,"Je kan de stijl van de ",(0,r.kt)("inlineCode",{parentName:"p"},"Pressable")," laten aanpassen afhankelijk hij ingedrukt is of niet. Dit doe je door in plaats van een style object mee te geven een functie mee te geven die een style object teruggeeft."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Text, View, Pressable, Alert } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Pressable\n                style={(style) => (style.pressed) ? styles.pressedTrue : styles.pressedFalse}\n                onPress={() => Alert.alert("Pressed!")}\n            >\n                <Text style={{color: "white"}}>Press Me</Text>\n            </Pressable>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight},\n    pressedTrue: { backgroundColor: "red", padding: 10, borderRadius: 5},\n    pressedFalse: { backgroundColor: "blue", padding: 10, borderRadius: 5}\n});\n\nexport default App;\n')),(0,r.kt)("h2",{id:"handling-events"},"Handling events"),(0,r.kt)("p",null,"Zoals we al bij de pressable hebben gezien, kan je events afhandelen door een functie mee te geven aan de ",(0,r.kt)("inlineCode",{parentName:"p"},"onPress")," prop. "),(0,r.kt)("p",null,"Pas op in html zijn events altijd in lowercase geschreven, in react native zijn events altijd in camelCase geschreven. "),(0,r.kt)("h3",{id:"button-1"},"Button"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, Button, View, Alert } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Button\n                title="Press me"\n                onPress={() => {\n                    Alert.alert("Pressed!");\n                }}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight}\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"textinput-1"},"TextInput"),(0,r.kt)("p",null,"TextInput heeft een aantal event handlers die je kan gebruiken:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"onChange: wordt aangeroepen wanneer de tekst in de input verandert. "),(0,r.kt)("li",{parentName:"ul"},"onChangeText: wordt aangeroepen wanneer de tekst in de input verandert. Het verschil met onChange is dat onChangeText de nieuwe tekst als argument meekrijgt."),(0,r.kt)("li",{parentName:"ul"},"onSubmitEditing: wordt aangeroepen wanneer de gebruiker op de submit knop drukt."),(0,r.kt)("li",{parentName:"ul"},"onFocus: wordt aangeroepen wanneer de gebruiker de input selecteert."),(0,r.kt)("li",{parentName:"ul"},"onKeyPress: wordt aangeroepen wanneer de gebruiker een toets indrukt. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, View, TextInput, Alert } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <TextInput\n                placeholder="Enter your name"\n                onChangeText={(text) => {\n                    console.log(text);\n                }}\n                onChange={(event) => {\n                    console.log(event.nativeEvent.text);\n                }}\n                onSubmitEditing={(event) => {\n                    console.log(event.nativeEvent.text);\n                }}\n                onFocus={() => {\n                    console.log("Focused");\n                }}\n                onKeyPress={(event) => {\n                    console.log(event.nativeEvent.key);\n                }}\n            />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight}\n});\n\nexport default App;\n')),(0,r.kt)("h3",{id:"pressable-1"},"Pressable"),(0,r.kt)("p",null,"Pressable heeft een aantal event handlers die je kan gebruiken:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"onPress: wordt aangeroepen wanneer de gebruiker op de button drukt."),(0,r.kt)("li",{parentName:"ul"},"onPressIn: wordt aangeroepen wanneer de gebruiker op de button begint te drukken."),(0,r.kt)("li",{parentName:"ul"},"onPressOut: wordt aangeroepen wanneer de gebruiker de button loslaat."),(0,r.kt)("li",{parentName:"ul"},"onLongPress: wordt aangeroepen wanneer de gebruiker de button lang ingedrukt houdt. Standaard op 500ms. Kan aangepast worden met de ",(0,r.kt)("inlineCode",{parentName:"li"},"delayLongPress")," prop.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"expo={}",expo:"{}"},'import React from "react";\nimport { StyleSheet, View, Pressable, Alert, Text } from "react-native";\nimport Constants from "expo-constants";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Pressable\n                delayLongPress={1000}\n                onPress={() => {\n                    Alert.alert("Pressed!");\n                }}\n                onPressIn={() => {\n                    Alert.alert("Pressed in!");\n                }}\n                onPressOut={() => {\n                    Alert.alert("Pressed out!");\n                }}\n                onLongPress={() => {\n                    Alert.alert("Long pressed!");\n                }}\n            >\n                <Text>Press Me</Text>\n            </Pressable>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: { paddingTop: Constants.statusBarHeight}\n});\n\nexport default App;\n')))}c.isMDXComponent=!0}}]);