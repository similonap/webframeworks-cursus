"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[7690],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var c=t(96540);const r={},i=c.createContext(r);function s(e){const n=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),c.createElement(i.Provider,{value:n},e.children)}},66115:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"wf-course/typescript-revisited/callbacks-function-types","title":"Callbacks/Function types","description":"Een callback is een functie (functie A) die wordt meegegeven als parameter van een andere functie (functie B). Deze functie (B) zal dan de meegegeven functie (A) uitvoeren.","source":"@site/docs/wf-course/typescript-revisited/callbacks-function-types.md","sourceDirName":"wf-course/typescript-revisited","slug":"/wf-course/typescript-revisited/callbacks-function-types","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/callbacks-function-types","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"wfCourse","previous":{"title":"Array/Object Destructuring","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/array-object-destructuring"},"next":{"title":"Array Methoden","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/array-methoden"}}');var r=t(74848),i=t(28453);const s={sidebar_position:5},a="Callbacks/Function types",o={},u=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"callbacksfunction-types",children:"Callbacks/Function types"})}),"\n",(0,r.jsx)(n.p,{children:"Een callback is een functie (functie A) die wordt meegegeven als parameter van een andere functie (functie B). Deze functie (B) zal dan de meegegeven functie (A) uitvoeren."}),"\n",(0,r.jsx)(n.p,{children:"Dit ziet er in code als volgt uit:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "typescript", "filename": "index.ts" }',children:'interface Callback {\n    (): void\n}\n\nlet functionA = (functionB: Callback) => {\n    functionB();\n}\n\nlet functionB: Callback = () => {\n    console.log("Function B executed")\n}\n\nfunctionA(functionB);\n'})}),"\n",(0,r.jsx)(n.p,{children:"Wil je geen interface aanmaken kan je ook gebruik maken van TypeScript types rechtstreeks in de functie signature."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "typescript", "filename": "index.ts" }',children:'//hide-start\ninterface Callback {\n    (): void\n}\n//hide-end\nlet functionA = (functionB: () => void) => {\n    functionB();\n}\n//hide-start\nlet functionB: Callback = () => {\n    console.log("Function B executed")\n}\n\nfunctionA(functionB);\n//hide-end\n'})}),"\n",(0,r.jsx)(n.p,{children:"Een voorbeeld van zo'n callback functie kan je hieronder vinden"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "typescript", "filename": "index.ts" }',children:"let sum = (a: number, b: number, callback: (sum: number) => void) => {\n  callback(a + b);\n};\n\nlet printNumber = (number: number) => {\n  console.log(number);\n};\n\nsum(1, 2, printNumber);\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);