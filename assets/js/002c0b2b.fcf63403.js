"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[96],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(96540);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},31717:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"wf-course/react/state/voorbeelden","title":"Extra voorbeelden","description":"Language selector","source":"@site/docs/wf-course/react/state/voorbeelden.md","sourceDirName":"wf-course/react/state","slug":"/wf-course/react/state/voorbeelden","permalink":"/webframeworks-cursus/wf-course/react/state/voorbeelden","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"wfCourse","previous":{"title":"State","permalink":"/webframeworks-cursus/wf-course/react/state/"},"next":{"title":"Hooks","permalink":"/webframeworks-cursus/wf-course/react/hooks/"}}');var o=t(74848),r=t(28453);const s={},i="Extra voorbeelden",c={},l=[{value:"Language selector",id:"language-selector",level:2},{value:"Zoeken, filteren en sorteren",id:"zoeken-filteren-en-sorteren",level:2},{value:"Toevoegen in een lijst",id:"toevoegen-in-een-lijst",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"extra-voorbeelden",children:"Extra voorbeelden"})}),"\n",(0,o.jsx)(n.h2,{id:"language-selector",children:"Language selector"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"} ',children:'import {useState} from "react";\n\ninterface Translation {\n  [language: string]: string\n}\n\ninterface Translations {\n  key: string,\n  translations: Translation\n}\n\nlet translations : Translations[] = [\n  {\n    key: "welcome",\n    translations: {\n      "NL": "Welkom op de website.",\n      "EN": "Welcome to the website.",\n      "FR": "Bienvenue sur le site."\n    }\n  },\n  {\n    key: "language",\n    translations: {\n      "NL": "Deze website is volledig vertaald in het Nederlands.",\n      "EN": "This website is fully translated into english.",\n      "FR": "Ce site est enti\xe8rement traduit en francais."\n    }\n  }\n]\n\nconst getTranslation = (language: string, key: string) => {\n  return translations.find(t => t.key === key)?.translations[language];\n}\n\nconst App = () => {\n  const [language, setLanguage] = useState("NL");\n\n  return (\n    <div>\n      <div>\n        <button onClick={() => setLanguage("NL")}>NL</button>\n        <button onClick={() => setLanguage("EN")}>EN</button>\n        <button onClick={() => setLanguage("FR")}>FR</button>\n      </div>\n      <h1>{getTranslation(language, "welcome")}</h1>\n      <p>{getTranslation(language, "language")}</p>\n    </div>\n  )\n\n}\nexport default App;\n'})}),"\n",(0,o.jsx)(n.h2,{id:"zoeken-filteren-en-sorteren",children:"Zoeken, filteren en sorteren"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"} ',children:'import React, { useState } from "react";\n\ninterface Item {\n    name: string;\n    price: number;\n    inStock: boolean;\n}\n\nconst GoodsList = ({goods} : {goods: Item[]}) => {\n    const [searchField, setSearchField] = useState("");\n    const [stockOnly, setStockOnly] = useState(false);\n    const [sortField, setSortField] = useState("name");\n\n    let filteredGoods = goods.filter((item) => item.name.toUpperCase().startsWith(searchField.toUpperCase()));\n    if (stockOnly) {\n        filteredGoods = filteredGoods.filter((item) => item.inStock);\n    }\n    \n    const sortedGoods = filteredGoods.sort((a, b) => {\n      switch (sortField) {\n        case "price":\n          return a.price - b.price;\n        case "inStock":\n          return Number(a.inStock) - Number(b.inStock);\n        case "name":\n          return a.name.localeCompare(b.name);\n        default:\n          return 0;\n      }\n    });\n\n    return (\n        <div>\n            <div>\n                <input placeholder="search" type="text" value={searchField} onChange={(event) => setSearchField(event.target.value)}  />\n                <input type="checkbox" checked={stockOnly} onChange={(e) => setStockOnly(e.target.checked)}/> Show only in stock\n            </div>\n            <div>\n              <select onChange={(e) => setSortField(e.target.value)} value={sortField}>\n                <option value="name">Name</option>\n                <option value="price">Price</option>\n                <option value="inStock">In stock</option>\n              </select>\n\n            </div>\n            <div style={{display: "grid", gridTemplateColumns: "300px 100px"}}>\n                {sortedGoods.map((item) => (\n                    <React.Fragment key={item.name}>\n                        <span style={{color: item.inStock ? "black" : "red"}}>{item.name}</span>\n                        <span>\u20ac {item.price}</span>\n                    </React.Fragment>))}\n            </div>\n        </div>\n    );\n}\n\nconst App = () => {\n    let goods : Item[] = [\n        {\n            name: "iPhone 12",\n            price: 699,\n            inStock: false\n        },\n        {\n            name: "iPhone 12 Pro",\n            price: 999,\n            inStock: true\n        },\n        {\n            name: "iPhone 12 Pro Max",\n            price: 1099,\n            inStock: true\n        },\n        {\n            name: "Samsung Galaxy S20",\n            price: 799,\n            inStock: true\n        },\n        {\n            name: "Samsung Galaxy S10",\n            price: 699,\n            inStock: false\n        },\n        {\n            name: "Samsung Galaxy S20 Ultra",\n            price: 999,\n            inStock: true\n        },\n        {\n            name: "Huawei P30",\n            price: 499,\n            inStock: true\n        },\n        {\n            name: "Huawei P40",\n            price: 599,\n            inStock: true\n        },\n        {\n            name: "Nokia 3310",\n            price: 399,\n            inStock: false\n        }\n\n    ]\n\n    return <GoodsList goods={goods}/>\n\n}\n\nexport default App;\n'})}),"\n",(0,o.jsx)(n.h2,{id:"toevoegen-in-een-lijst",children:"Toevoegen in een lijst"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',children:'import React, { useState } from "react";\n\ninterface Item {\n    name: string;\n    price: number;\n    inStock: boolean;\n}\n\nconst GoodsList = ({goods : propsGood} : {goods: Item[]}) => {\n    const [goods, setGoods] = useState(propsGood);\n    const [productName, setProductName] = useState("");\n    const [price, setPrice] = useState(500);\n    const [inStock, setInStock] = useState(false);\n\n    const addProduct : React.FormEventHandler<HTMLFormElement> = (e) => {\n        e.preventDefault();\n        setGoods([...goods, {name: productName, price: price, inStock: inStock}]);\n        setProductName("");\n        setPrice(0);\n        setInStock(false);\n    }\n\n    return (\n        <div>\n            <div>\n                <form onSubmit={addProduct} style={{display: "grid", gridTemplateColumns: "200px 200px"}}>\n                <label>Product name: </label><input placeholder="product name" type="text" value={productName} onChange={(event) => setProductName(event.target.value)} />\n                <label>Price: </label><input placeholder="price" type="number" value={price} onChange={(event) => setPrice(parseInt(event.target.value))} />\n                <label>In stock? </label><input type="checkbox" checked={inStock} onChange={(event) => setInStock(event.target.checked)} /> \n                <input type="submit" value="Add product" style={{gridColumnStart: 1, gridColumnEnd: "span 2"}}/>\n                </form>\n            </div>\n            <div style={{display: "grid", gridTemplateColumns: "300px 100px"}}>\n                {goods.map((item) => (\n                    <React.Fragment key={item.name}>\n                        <span style={{color: item.inStock ? "black" : "red"}}>{item.name}</span>\n                        <span>\u20ac {item.price}</span>\n                    </React.Fragment>))}\n            </div>\n        </div>\n    );\n}\n\nconst App = () => {\n    let goods : Item[] = [\n        {\n            name: "iPhone 12",\n            price: 699,\n            inStock: false\n        },\n        {\n            name: "iPhone 12 Pro",\n            price: 999,\n            inStock: true\n        },\n        {\n            name: "iPhone 12 Pro Max",\n            price: 1099,\n            inStock: true\n        },\n        {\n            name: "Samsung Galaxy S20",\n            price: 799,\n            inStock: true\n        },\n        {\n            name: "Samsung Galaxy S10",\n            price: 699,\n            inStock: false\n        },\n        {\n            name: "Samsung Galaxy S20 Ultra",\n            price: 999,\n            inStock: true\n        },\n        {\n            name: "Huawei P30",\n            price: 499,\n            inStock: true\n        },\n        {\n            name: "Huawei P40",\n            price: 599,\n            inStock: true\n        },\n        {\n            name: "Nokia 3310",\n            price: 399,\n            inStock: false\n        }\n\n    ]\n\n    return <GoodsList goods={goods}/>\n\n}\n\nexport default App;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);