"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[5823],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5402:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=t(7462),r=t(7294),o=t(3905);const l=e=>{let{goods:n}=e;const[t,a]=(0,r.useState)(""),[o,l]=(0,r.useState)(!1),i=n.filter((e=>{const n=e.name.toLowerCase().includes(t.toLowerCase()),a=e.inStock;return n&&(!o||a)}));return r.createElement("div",null,r.createElement("div",null,r.createElement("input",{placeholder:"search",type:"text",value:t,onChange:e=>a(e.target.value)}),r.createElement("input",{type:"checkbox",checked:o,onChange:e=>l(e.target.checked)})," Show only in stock"),r.createElement("div",{style:{display:"grid",gridTemplateColumns:"300px 100px"}},i.map((e=>r.createElement(r.Fragment,{key:e.name},r.createElement("span",{style:{color:e.inStock?"black":"red"}},e.name),r.createElement("span",null,"\u20ac ",e.price))))))},i=()=>r.createElement(l,{goods:[{name:"iPhone 12",price:699,inStock:!1},{name:"iPhone 12 Pro",price:999,inStock:!0},{name:"iPhone 12 Pro Max",price:1099,inStock:!0},{name:"Samsung Galaxy S20",price:799,inStock:!0},{name:"Samsung Galaxy S10",price:699,inStock:!1},{name:"Samsung Galaxy S20 Ultra",price:999,inStock:!0},{name:"Huawei P30",price:499,inStock:!0},{name:"Huawei P40",price:599,inStock:!0},{name:"Nokia 3310",price:399,inStock:!1}]}),s={sidebar_position:6},d="State",p={unversionedId:"wf-course/react/state/README",id:"wf-course/react/state/README",title:"State",description:"State en Props zijn een van de meest essenti\xeble concepten die je moet begrijpen in React. Props dienen om informatie door een componenten structuur te geven, en state wordt gebruikt om applicaties interactief te maken.",source:"@site/docs/wf-course/react/state/README.md",sourceDirName:"wf-course/react/state",slug:"/wf-course/react/state/",permalink:"/webframeworks-cursus/wf-course/react/state/",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"wfCourse",previous:{title:"Event Handling",permalink:"/webframeworks-cursus/wf-course/react/event-handling/"},next:{title:"Extra voorbeelden",permalink:"/webframeworks-cursus/wf-course/react/state/voorbeelden"}},u={},c=[{value:"useState hook",id:"usestate-hook",level:2},{value:"setState met callback",id:"setstate-met-callback",level:2},{value:"Regels van useState",id:"regels-van-usestate",level:2},{value:"Hoe state herkennen?",id:"hoe-state-herkennen",level:2},{value:"We kunnen deze analyse eens uitvoeren op het volgende component:",id:"we-kunnen-deze-analyse-eens-uitvoeren-op-het-volgende-component",level:4},{value:"We kunnen hier de volgende data herkennen:",id:"we-kunnen-hier-de-volgende-data-herkennen",level:4},{value:"Als we deze data analyseren, kunnen we de volgende conclusies trekken:",id:"als-we-deze-data-analyseren-kunnen-we-de-volgende-conclusies-trekken",level:4},{value:"Array als state",id:"array-als-state",level:2},{value:"Toevoegen aan array",id:"toevoegen-aan-array",level:3},{value:"Verwijderen van array",id:"verwijderen-van-array",level:3},{value:"Wijzigen in array",id:"wijzigen-in-array",level:3},{value:"Object als state",id:"object-als-state",level:2},{value:"Object",id:"object",level:3},{value:"Dictionary",id:"dictionary",level:3},{value:"Voorbeelden",id:"voorbeelden",level:2},{value:"Select",id:"select",level:3},{value:"Checkbox",id:"checkbox",level:3},{value:"Radio button",id:"radio-button",level:3},{value:"Select Multiple",id:"select-multiple",level:3},{value:"Checkbox multiple",id:"checkbox-multiple",level:3},{value:"State delen tussen componenten",id:"state-delen-tussen-componenten",level:3}],m={toc:c};function g(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"state"},"State"),(0,o.kt)("p",null,"State en Props zijn een van de meest essenti\xeble concepten die je moet begrijpen in React. Props dienen om informatie door een componenten structuur te geven, en state wordt gebruikt om applicaties interactief te maken. "),(0,o.kt)("p",null,"Terwijl props worden gebruikt om data van buitenaf te geven aan een component, wordt state gebruikt om data van een component te bewaren. Als deze data verandert, zal de component opnieuw gerenderd worden (en dus ook zijn kinderen). "),(0,o.kt)("p",null,"Alles wat verandert doorheen de levenscyclus van een component, wordt opgeslagen in de state. Dit kan een waarde zijn van een input veld, een checkbox, een lijst van items, een error, een loading state, ..."),(0,o.kt)("h2",{id:"usestate-hook"},"useState hook"),(0,o.kt)("p",null,"We gaan het gebruik van state eens demonstreren aan de hand van een voorbeeld. We gaan hiervoor terug naar ons ",(0,o.kt)("inlineCode",{parentName:"p"},"InputView")," voorbeeld. Stel dat we elke keer de gebruiker iets intypt in de input box, dat we deze text willen laten tonen ergens anders in de applicatie. Dit is dus informatie die aangepast wordt over de looptijd van de applicatie. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'const InputView = () => {\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    console.log(event.target.value);\n  }\n  return (\n    <input type="text" id="name" onChange={handleChange} />\n  )\n}\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"We zouden foutief kunnen veronderstellen dat we dit probleem kunnen oplossen door een variabele te maken die de ingetypte tekst opslaat. Een verstaanbare poging is deze:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'// DEZE CODE IS FOUT\nconst InputView = () => {\n  let name = "";\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    event = event.target.value;\n  }\n  return (\n    <>\n      <input type="text" id="name" onChange={handleChange} />\n      <p>\n        The name you typed is {name}\n      </p>\n    </>\n  );\n}\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Wijzigingen in het input veld hebben ",(0,o.kt)("strong",{parentName:"p"},"geen effect")," op de rest van de pagina. Elke render (en er vindt er niet eens een plaats wanneer de handler de waarde wijzigt) runt de code voor de component opnieuw. Er wordt dus telkens een nieuwe variabele name met beginwaarde ",(0,o.kt)("inlineCode",{parentName:"p"},'""')," aangemaakt."),(0,o.kt)("p",null,"In plaats van een gewone variabele is een state variabele nodig. ",(0,o.kt)("strong",{parentName:"p"},"Bij een wijziging hiervan wordt de component hertekend en de waarde wordt bijgehouden over uitvoeringen heen.")," Deze variabele kan aangemaakt worden door middel van de useState hook."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const [name, setName] = useState<string>('');\n")),(0,o.kt)("p",null,"De ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," functie heeft als argument een initi\xeble state. Dit is de start waarde die de state zal krijgen als de component voor de eerste keer gerenderd wordt. De functie geeft een array terug met twee elementen in: het eerste element is de huidige state en het tweede element is een functie waarmee je de state ",(0,o.kt)("strong",{parentName:"p"},"kan en moet")," aanpassen. We geven aan welk type onze state zal bevatten door ",(0,o.kt)("inlineCode",{parentName:"p"},"<string>")," mee te geven aan de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," functie."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import { useState } from "react";\n\nconst InputView = () => {\n  const [name, setName] = useState<string>(\'\');\n\n  const handleChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    setName(event.target.value);\n  }\n\n  return (\n    <>\n      <input type="text" id="name" onChange={handleChange} value={name}/>\n      <p>\n        The name you typed is {name}\n      </p>\n    </>\n  );\n}\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Het value attribuut wordt ingesteld op de huidige waarde van de state. Zo zorgen we ervoor dat het inputveld altijd up-to-date is met de huidige waarde van de state. Dit noemen ze in react ",(0,o.kt)("strong",{parentName:"p"},"controlled components"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Je mag meerdere keren ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," gebruiken in 1 component. Bijvoorbeeld als je meerdere input velden hebt in je formulier zal je ook meerdere states hebben.")),(0,o.kt)("h2",{id:"setstate-met-callback"},"setState met callback"),(0,o.kt)("p",null,"Soms is de nieuwe waarde van een state afhankelijk van de vorige waarde van de state. In dit geval moeten we de ",(0,o.kt)("inlineCode",{parentName:"p"},"setState")," aanroepen met een callback functie als argument. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{8,9} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{8,9}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      Count: {count}\n      <button onClick={() => setCount(0)}>Reset</button>\n      <button onClick={() => {\n        setCount(count + 1); \n        setCount(count + 1); // count is nog niet geupdated.\n       }\n      }>+</button>\n    </>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"In het bovenstaande voorbeeld zou je denken dat de count altijd met twee omhoog gaat. Maar dat is niet het geval. Als de tweede ",(0,o.kt)("inlineCode",{parentName:"p"},"setCount")," wordt aangeroepen is de ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," state nog niet aangepast. "),(0,o.kt)("p",null,"Wil je dit doen dan moet je dit op de volgende manier doen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{8,9} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{8,9}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      Count: {count}\n      <button onClick={() => setCount(0)}>Reset</button>\n      <button onClick={() => {\n        setCount(prevCount => prevCount + 1); \n        setCount(prevCount => prevCount + 1);\n       }\n      }>+</button>\n    </>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h2",{id:"regels-van-usestate"},"Regels van useState"),(0,o.kt)("p",null,"Je mag geen ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook gebruiken in:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"loops"),(0,o.kt)("li",{parentName:"ul"},"condities"),(0,o.kt)("li",{parentName:"ul"},"geneste functies")),(0,o.kt)("p",null,"Je moet altijd de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook gebruiken ",(0,o.kt)("strong",{parentName:"p"},"bovenaan")," je React component (functie). "),(0,o.kt)("p",null,"Als je deze regels volgt dan ben je altijd zeker dat de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hooks opgeroepen worden in dezelfde volgorde elke keer het component gerendered wordt. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"setState")," mag uiteraard wel overal gebruikt worden in het component op eender welke plaats."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Er zullen meestal geen foutmeldingen ontstaan als je dit toch doet. Maar hierdoor kunnen heel moeilijk te debuggen bugs door kunnen onstaan. Dus let er op dat je deze regels zelf goed volgt!")),(0,o.kt)("p",null,"Hier is een voorbeeld waar we de regels van de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook niet respecteren:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import { useState } from "react";\n\ninterface UserInfoProps {\n  askAge: boolean;\n}\n\nconst UserInfo = ({ askAge }: UserInfoProps) => {\n  const [name, setName] = useState("");\n  if (askAge) {\n    const [age, setAge] = useState(0); // 1. Mag niet in een IF staan\n                                       // 2. Moet altijd bovenaan de functie staan\n  }\n\n  return (\n    <fieldset>\n      <legend>User Info</legend>\n      <label htmlFor="name">Name:</label>\n      <input\n        name="name"\n        type="text"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <br />\n      {askAge && (\n        <>\n          <label htmlFor="name">Age:</label>\n          <input\n            type="text"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </>\n      )}\n    </fieldset>\n  );\n};\n\nconst App = () => {\n  const [askAge, setAskAge] = useState(false);\n\n  return (<>\n      <label>Ask age?</label>\n      <input type="checkbox" checked={askAge} onChange={(e) => setAskAge(e.target.checked)}/>\n      <UserInfo askAge={askAge} />\n    </>);\n};\n\nexport default App;\n')),(0,o.kt)("p",null,"De oplossing hier is de ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook uit de if statement te zetten en bovenaan de functie."),(0,o.kt)("h2",{id:"hoe-state-herkennen"},"Hoe state herkennen?"),(0,o.kt)("p",null,"Bij elk component moet je de volgende vragen stellen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Werd de data van buitenaf gegeven? Dan is het een prop."),(0,o.kt)("li",{parentName:"ul"},"Blijft de date hetzelfde doorheen de levenscyclus van het component? Dan is het waarschijnlijk geen state."),(0,o.kt)("li",{parentName:"ul"},"Is de data afgeleid van andere data in je component? Dan is het waarschijnlijk geen state.")),(0,o.kt)("h4",{id:"we-kunnen-deze-analyse-eens-uitvoeren-op-het-volgende-component"},"We kunnen deze analyse eens uitvoeren op het volgende component:"),(0,o.kt)("div",{style:{border:"1px solid black",padding:10}},(0,o.kt)(i,{mdxType:"GoodsSearch"})),(0,o.kt)("h4",{id:"we-kunnen-hier-de-volgende-data-herkennen"},"We kunnen hier de volgende data herkennen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"De originele lijst van producten"),(0,o.kt)("li",{parentName:"ul"},"De tekst die in de zoekbalk is ingegeven"),(0,o.kt)("li",{parentName:"ul"},"De waarde van de checkbox"),(0,o.kt)("li",{parentName:"ul"},"De lijst van producten die gefilterd is op de zoektekst")),(0,o.kt)("h4",{id:"als-we-deze-data-analyseren-kunnen-we-de-volgende-conclusies-trekken"},"Als we deze data analyseren, kunnen we de volgende conclusies trekken:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"De originele lijst van producten wordt niet aangepast. Er worden bijvoorbeeld geen producten toegevoegd of verwijderd. Dit is dus geen state."),(0,o.kt)("li",{parentName:"ul"},"De tekst die in de zoekbalk is ingegeven, wordt aangepast door de gebruiker. Dit is dus state."),(0,o.kt)("li",{parentName:"ul"},"De waarde van de checkbox wordt aangepast door de gebruiker. Dit is dus state."),(0,o.kt)("li",{parentName:"ul"},"De gefilterde lijst van producten is afgeleid van de originele lijst en de tekst die in de zoekbalk is ingegeven. Dit is dus geen state.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"De uitwerking van dit voorbeeld kan je vinden op ",(0,o.kt)("a",{parentName:"p",href:"/webframeworks-cursus/wf-course/react/state/voorbeelden#zoeken-en-filteren"},"Voorbeelden"))),(0,o.kt)("h2",{id:"array-als-state"},"Array als state"),(0,o.kt)("p",null,"Een array als state definieren gebeurd op identiek dezelfde manier als een state met andere data types:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [numbers, setNumbers] = useState<number[]>([0,1,2,3,4]);\n\n  return (\n    <>\n      <table>\n        <tbody>\n        {numbers.map((number, index) => <tr key={index}><td>{number}</td></tr>)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Tot nu toe is er nog niets interactief aan de hand en hadden we de state even goed als een variabele kunnen declareren. "),(0,o.kt)("p",null,"We voegen een invoerveld toe zoals we dit in het vorige deel hebben gedaan waarmee we een getal kunnen invoeren."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'<input type="number" onChange={(event) => setNumber(parseInt(event.target.value))}/>\n')),(0,o.kt)("p",null,"en we maken hier ook ineens een controller component van:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const [number, setNumber] = useState<number>(0);\n")),(0,o.kt)("p",null,"Nu willen we een button toevoegen die dit getal toevoegt aan de lijst van getallen als we op de knop duwen."),(0,o.kt)("p",null,"We zullen eerst laten zien hoe we dit ",(0,o.kt)("strong",{parentName:"p"},"NIET")," moeten doen:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'// DEZE CODE IS FOUT\n//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [numbers, setNumbers] = useState<number[]>([0,1,2,3,4]);\n  const [number, setNumber] = useState<number>(0);\n\n  const addClicked : React.MouseEventHandler<HTMLButtonElement> = () => {\n    numbers.push(number);\n  }\n\n  return (\n    <>\n      <input type="number" onChange={(event) => setNumber(parseInt(event.target.value))} value={number}/>\n      <button onClick={addClicked}>Add</button>\n      <table>\n        <tbody>\n          {numbers.map((number, index) => <tr key={index}><td>{number}</td></tr>)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Als je deze code uitprobeert zie je dat er niets gebeurt. Pas nadat je terug op de knop duwt zal je element worden toegevoegd. Dat is omdat je niet de ",(0,o.kt)("inlineCode",{parentName:"p"},"setNumber")," functie gebruikt om de state te zetten dus React weet niet dat het component opnieuw moet worden gerendered."),(0,o.kt)("p",null,"De volgende foute (maar begrijpelijke) veronderstelling zou zijn om gewoon hierna de ",(0,o.kt)("inlineCode",{parentName:"p"},"setNumber")," functie aan te roepen, maar dit werkt ook niet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// OOK FOUT!\nconst addClicked : React.MouseEventHandler<HTMLButtonElement> = () => {\n  numbers.push(number);\n  setNumbers(numbers);\n}\n")),(0,o.kt)("p",null,"Dit komt omdat je alle state objecten moet behandelen als readonly. Je mag dus nooit iets rechstreeks aanpassen aan het object."),(0,o.kt)("h3",{id:"toevoegen-aan-array"},"Toevoegen aan array"),(0,o.kt)("p",null,"Voor een array moeten we bij elke wijziging een kopie maken van de array en daar het element in toevoegen. Enkel dan kan React weten dat de array opnieuw gerendered moet worden."),(0,o.kt)("p",null,"Een kopie van een array doe je aan de hand van de spread syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{6} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{6}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [numbers, setNumbers] = useState<number[]>([0,1,2,3,4]);\n  const [number, setNumber] = useState<number>(0);\n\n  const addClicked : React.MouseEventHandler<HTMLButtonElement> = () => {\n    setNumbers([...numbers, number]);\n  }\n\n  return (\n    <>\n      <input type="number" onChange={(event) => setNumber(parseInt(event.target.value))} value={number}/>\n      <button onClick={addClicked}>Add</button>\n      <table>\n        <tbody>\n          {numbers.map((number, index) => <tr key={index}><td>{number}</td></tr>)}\n        </tbody>\n      </table>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h3",{id:"verwijderen-van-array"},"Verwijderen van array"),(0,o.kt)("p",null,"Het verwijderen van elementen kan je doen aan de hand van een filter. We kunnen hier een ",(0,o.kt)("inlineCode",{parentName:"p"},"removeNumber")," functie aanmaken die een ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," (de index) als argument aanvaard. Dit werkt omdat filter altijd een ",(0,o.kt)("strong",{parentName:"p"},"nieuwe")," array teruggeeft."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4-6} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{4-6}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [numbers, setNumbers] = useState<number[]>([0,1,2,3,4]);\n\n  const removeNumber = (i : number) => {\n    let numbersCpy = numbers.filter((number, index) => index !== i);\n    setNumbers(numbersCpy);\n  }\n\n  return (\n    <>\n      <table>\n        <tbody>\n          {numbers.map((number, index) => \n            (<tr key={index}>\n              <td>{number}</td>\n              <td><button onClick={() => { removeNumber(index); }}>X</button></td>\n            </tr>)\n            )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h3",{id:"wijzigen-in-array"},"Wijzigen in array"),(0,o.kt)("p",null,"Wil je een element wijzigen dan kan je dit doen door een kopie te maken van de array en het element te vervangen door een nieuw element. We kunnen hiervoor de ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," functie gebruiken. We mappen elk element van de array naar een nieuw element. Als het element dat we willen wijzigen is dan maken we een nieuw element aan, anders laten we het element ongewijzigd."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{7-9} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{7-9}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n  const [numbers, setNumbers] = useState<number[]>([0,1,2,3,4]);\n\n  const modifyNumber = (i : number) => {\n    let promptResult = prompt("Enter new number");\n    if (promptResult) {\n        let newNumber = parseInt(promptResult);\n        let numbersCpy = numbers.map((oldNumber, index) => (index === i) ? newNumber : oldNumber);\n        setNumbers(numbersCpy);\n    }\n  }\n\n  return (\n    <>\n      <table>\n        <tbody>\n          {numbers.map((number, index) => \n            (<tr key={index}>\n              <td>{number}</td>\n              <td><button onClick={() => { modifyNumber(index); }}>Modify</button></td>\n            </tr>)\n            )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h2",{id:"object-als-state"},"Object als state"),(0,o.kt)("h3",{id:"object"},"Object"),(0,o.kt)("p",null,"Een object kan je ook gebruiken als state. Je moet hier net zoals bij een array de spread syntax gebruiken om een kopie te maken van het object. Je kan dan de gewenste eigenschap aanpassen."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{4-6} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{4-6}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\n//hide-end\nconst App = () => {\n  const [person, setPerson] = useState<Person>({name: "John", age: 42});\n\n  const changeName = () => {\n\n    setPerson({...person, name: "Jane"});\n  }\n\n  return (\n    <>\n      <p>{person.name} is {person.age} years old</p>\n      <button onClick={changeName}>Change name</button>\n    </>\n  );\n};\n\nexport default App;\n')),(0,o.kt)("h3",{id:"dictionary"},"Dictionary"),(0,o.kt)("p",null,"In het volgende code voorbeeld plaatsen we een object in een state zodat we dynamisch de keys en values van dit object kunnen aanpassen. Omdat het een object is met een niet op voorhand gedefinieerde interface moeten we een speciale interface gebruiken waar we gewoon aangeven welk type de key heeft en welk type de value (zie dictionary). Dit object mag net zoals een array niet rechtstreeks worden aangepast maar er moet een kopie voorzien worden."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{11} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{11}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport React, { useState } from "react";\n//hide-end\ninterface Dictionary {\n  [key: string]: string\n}\n\nconst App = () => {\n  const [dictionary, setDictionary] = useState<Dictionary>({})\n  const [key,setKey] = useState("");\n  const [value,setValue] = useState("");\n\n  const buttonClicked : React.MouseEventHandler<HTMLButtonElement> = () => {\n    setDictionary({...dictionary, [key]:value});\n  }\n\n  return (\n    <>\n      <div>\n        <input placeholder="key" type="text" value={key} onChange={(event) => setKey(event.target.value)}/>\n        <input placeholder="value" type="text" value={value} onChange={(event) => setValue(event.target.value)}/>\n        <button onClick={buttonClicked}>Set</button>\n        <br/>\n        {JSON.stringify(dictionary)}\n      </div>\n    </>\n  );\n};\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h2",{id:"voorbeelden"},"Voorbeelden"),(0,o.kt)("h3",{id:"select"},"Select"),(0,o.kt)("p",null,"We beginnen van het ",(0,o.kt)("inlineCode",{parentName:"p"},"Select")," voorbeeld dat we hebben gemaakt in het onderdeel over event handling. We gaan hier nu een controlled component van maken. Dit betekent dat we een state moeten aanmaken om de geselecteerde waarde van dit component bij te houden:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const [selectedBrand, setSelectedBrand] = useState("");\n')),(0,o.kt)("p",null,"daarna zorg je dat de ",(0,o.kt)("inlineCode",{parentName:"p"},"onChange")," prop een functie bevat die de state aanpast als het veld aangepast is. Ook zet je de ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," prop op de waarde van de state. Zo blijft die altijd up-to-date."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{2,7} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{2,7}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n//hide-end\nconst App = () => {\n    const [selectedBrand, setSelectedBrand] = useState("");\n\n    return (\n      <>\n        <label htmlFor="cars">Choose a car:</label>\n        <select id="cars" name="cars" onChange={(event) => setSelectedBrand(event.target.value)} value={selectedBrand}>\n          <option disabled value="">Select an option</option>\n          <option value="volvo">Volvo</option>\n          <option value="saab">Saab</option>\n          <option value="fiat">Fiat</option>\n          <option value="audi">Audi</option>\n        </select>\n        <p>You selected {selectedBrand}</p>\n      </>\n    )\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h3",{id:"checkbox"},"Checkbox"),(0,o.kt)("p",null,"Iets gelijkaardigs kunnen we nu doen met een ",(0,o.kt)("inlineCode",{parentName:"p"},"Checkbox"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react-assets", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react-assets",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport {useState} from "react";\n\nconst containerStyle : React.CSSProperties = {\n    height: "100vh",width:"100vw"\n}\n\nconst centerBulb : React.CSSProperties = {\n    position: "absolute", top: "50%", left: "50%", transform: "translate(-50%, -50%)"\n}\n\n//hide-end\nconst App = () => {\n    const [light, setLight] = useState(true);\n    const backgroundStyle = {backgroundColor: light ? "white" : "black"};\n    return (\n      <div style={{...containerStyle,...backgroundStyle}}>\n        <input\n          type="checkbox"\n          onChange={(event) => setLight(event.target.checked)}\n          checked={light}\n        />\n\n        <div style={centerBulb} onClick={() => {alert(`This light is ${light ? "on" : "off"}`)}}>\n        {light ? <img src={require("./assets/lightbulb_on.png")}/> : <img src={require("./assets/lightbulb_off.png")}/>}\n        </div>\n      </div>\n    )\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Je ziet hierboven dat je de waarde van de state op verschillende plaatsen kan aanspreken:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In een event handler van een ander element. Dit kan omdat de state ook in de scope van deze handler is."),(0,o.kt)("li",{parentName:"ul"},"In plaats van de ",(0,o.kt)("inlineCode",{parentName:"li"},"value")," prop gebruiken we hier de ",(0,o.kt)("inlineCode",{parentName:"li"},"checked")," prop om de checked status te zetten van de checkbox."),(0,o.kt)("li",{parentName:"ul"},"In de TSX zelf: we gebruiken de conditional operator (?) hier om de juiste image te tonen afhankelijk van de waarde van de state.")),(0,o.kt)("h3",{id:"radio-button"},"Radio button"),(0,o.kt)("p",null,"Ook een reeks radio buttons heeft een achterliggende state nodig. We hebben per radio button een change listener nodig en hier maken we ook gebruik van de ",(0,o.kt)("inlineCode",{parentName:"p"},"checked")," property. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import { useState } from "react";\n\nconst App = () => {\n  const [favoriteLanguage, setFavoriteLanguage] = useState<string>("");\n\n  return (\n    <div className="App">\n      Please enter your favorite programming language:\n      <br />\n      <input type="radio" name="fav_language" value="TypeScript" checked={favoriteLanguage === "TypeScript"} onChange={(event) => setFavoriteLanguage(event.target.value)}/>\n      <label htmlFor="typescript">TypeScript</label>\n      <br />\n      <input type="radio" name="fav_language" value="C#" checked={favoriteLanguage === "C#"} onChange={(event) => setFavoriteLanguage(event.target.value)}/>\n      <label htmlFor="C#">C#</label>\n      <br />\n      <input type="radio" name="fav_language" value="PHP" checked={favoriteLanguage === "PHP"} onChange={(event) => setFavoriteLanguage(event.target.value)}/>\n      <label htmlFor="PHP">PHP</label>\n      <br/>\n      <button onClick={() => { alert(`You selected ${favoriteLanguage}`)}}>Click Me</button>\n    </div>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h3",{id:"select-multiple"},"Select Multiple"),(0,o.kt)("p",null,"In het voorgaande voorbeeld kon je maar 1 item selecteren in de lijst. Als je wil werken met een multiselect is een state met een string hier niet voldoende voor. We moeten een array bijhouden van geselecteerde waarden. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const [selectedBrand, setSelectedBrand] = useState<string[]>([]);\n")),(0,o.kt)("p",null,"Dat gaan we ook in een state doen. De logica hierachter is wel iets complexer. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{5} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{5}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport React, {useState} from "react";\n//hide-end\nconst App = () => {\n    const [selectedBrands, setSelectedBrands] = useState<string[]>([]);\n\n    const brandChange : React.ChangeEventHandler<HTMLSelectElement> = (event) => {\n      setSelectedBrands(Array.from(event.target.selectedOptions, option => option.value));\n    }\n\n    return (\n      <>\n        <label htmlFor="cars">Choose your favorite car brands:</label>\n        <br/>\n        <select id="cars" name="cars" onChange={brandChange} value={selectedBrands} multiple>\n          <option value="volvo">Volvo</option>\n          <option value="saab">Saab</option>\n          <option value="fiat">Fiat</option>\n          <option value="audi">Audi</option>\n        </select>\n        \n      </>\n    )\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"Je merkt hier het volgende stuk code op:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"setSelectedBrands(Array.from(event.target.selectedOptions, option => option.value));\n")),(0,o.kt)("p",null,"Dit zorgt ervoor dat we de selectedOptions omzetten naar een array en dan elk element mappen naar zijn waarde. Zo krijgen we een array van strings van de waarden. Vervolgens gebruiken we de setter van de state om de state te updaten naar de nieuwe lijst. "),(0,o.kt)("p",null,"Je zou dit ook kunnen doen met een ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," loop:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nimport React, {useState} from "react";\n//hide-end\nconst App = () => {\n    const [selectedBrands, setSelectedBrands] = useState<string[]>([]);\n\n    const brandChange : React.ChangeEventHandler<HTMLSelectElement> = (event) => {\n      let selectedBrands: string[] = [];\n      for (let option of event.target.selectedOptions) {\n        selectedBrands.push(option.value);\n      }\n      setSelectedBrands(selectedBrands);\n    }\n\n    return (\n      <>\n        <label htmlFor="cars">Choose your favorite car brands:</label>\n        <br/>\n        <select id="cars" name="cars" onChange={brandChange} value={selectedBrands} multiple>\n          <option value="volvo">Volvo</option>\n          <option value="saab">Saab</option>\n          <option value="fiat">Fiat</option>\n          <option value="audi">Audi</option>\n        </select>\n        \n      </>\n    )\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("h3",{id:"checkbox-multiple"},"Checkbox multiple"),(0,o.kt)("p",null,"In het voorgaande voorbeeld hebben we gebruik gemaakt van 1 checkbox. In het onderstaande voorbeeld maken we een groep van checkboxes die aan elkaar gelinked zijn."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import { useState } from "react";\n\nexport default function App() {\n  const [favoriteLanguages, setFavoriteLanguages] = useState<string[]>([]);\n\n  const handleFavoriteLanguageChange : React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    if (event.target.checked) {\n      // Add to the favorite list\n      setFavoriteLanguages([...favoriteLanguages, event.target.value]);\n    } else {\n      // Remove from the favorite list\n      setFavoriteLanguages(favoriteLanguages.filter((lang) => lang !== event.target.value));\n    }\n  }\n\n  return (\n    <div className="App">\n      <fieldset>\n        <legend>Select the programming languages you like</legend>      \n        <input type="checkbox" name="fav_language" value="TypeScript" checked={favoriteLanguages.includes("TypeScript")} onChange={handleFavoriteLanguageChange}/>\n        <label htmlFor="typescript">TypeScript</label>\n        <br />\n        <input type="checkbox" name="fav_language" value="C#" checked={favoriteLanguages.includes("C#")} onChange={handleFavoriteLanguageChange}/>\n        <label htmlFor="C#">C#</label>\n        <br />\n        <input type="checkbox" name="fav_language" value="PHP" checked={favoriteLanguages.includes("PHP")} onChange={handleFavoriteLanguageChange}/>\n        <label htmlFor="PHP">PHP</label>\n        <br/>\n      </fieldset>\n      You selected: \n      <ul>\n      {favoriteLanguages.map((lang) => <li>{lang}</li>)}\n      </ul>\n    </div>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,o.kt)("p",null,"We hebben hier een aparte handler gemaakt voor de onChange listener. Die kijkt na of het element geselecteerd is, zo ja dan voegt hij het element toe aan de lijst en updated de state, anders wordt het element verwijderd uit de lijst."),(0,o.kt)("h3",{id:"state-delen-tussen-componenten"},"State delen tussen componenten"),(0,o.kt)("p",null,"Soms kan de verleiding heel groot zijn om op de volgende manier om een state te delen tussen componenten:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'import { useState } from "react";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n\n  const Counter = () => {\n    return (<>\n      <button onClick={() => setCount(0)}>Reset</button>\n      <button onClick={() => setCount(count + 1)}>+</button>\n    </>);\n  }\n\n  return (\n    <>\n      Count: {count}\n      <Counter/>\n      <button onClick={() => setCount(0)}>RESET</button>\n    </>\n  );\n}\n\nexport default App;\n')))}g.isMDXComponent=!0}}]);