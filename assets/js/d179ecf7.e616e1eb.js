"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[8271],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},32159:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"wf-course/react/componenten/README","title":"Componenten","description":"Tot nu toe had je altijd maar 1 functie: de App functie. Het is mogelijk alle code onder te brengen in deze functie, maar dan is het niet meer mogelijk (bijvoorbeeld in een later project) een onderdeeltje van de applicatie te herbruiken. Het is beter de applicatie op te splitsen in kleine herbruikbare blokjes. Deze herbruikbare blokjes heten componenten.","source":"@site/docs/wf-course/react/componenten/README.md","sourceDirName":"wf-course/react/componenten","slug":"/wf-course/react/componenten/","permalink":"/webframeworks-cursus/wf-course/react/componenten/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"wfCourse","previous":{"title":"Lijsten","permalink":"/webframeworks-cursus/wf-course/react/lijsten/"},"next":{"title":"Props","permalink":"/webframeworks-cursus/wf-course/react/componenten/props"}}');var r=t(74848),s=t(28453);const i={sidebar_position:4},o="Componenten",c={},d=[];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"componenten",children:"Componenten"})}),"\n",(0,r.jsxs)(n.p,{children:["Tot nu toe had je altijd maar 1 functie: de ",(0,r.jsx)(n.code,{children:"App"})," functie. Het is mogelijk alle code onder te brengen in deze functie, maar dan is het niet meer mogelijk (bijvoorbeeld in een later project) een onderdeeltje van de applicatie te herbruiken. Het is beter de applicatie op te splitsen in kleine herbruikbare blokjes. Deze herbruikbare blokjes heten componenten."]}),"\n",(0,r.jsx)(n.p,{children:"We illustreren dit met onderstaande applicatie, die een lijst van games toont:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',children:'//hide-start\nimport React from "react";\n\ninterface Game {\n  id: number\n  name: string,\n  releaseYear: number,\n  sales: number\n}\n\nconst games : Game[] = [\n  {\n    id: 0,\n    name: "World of Warcraft",\n    releaseYear: 2004,\n    sales: 5\n  },\n  {\n    id: 1,\n    name: "Valheim",\n    releaseYear: 2021,\n    sales: 10\n  },\n  {\n    id: 2,\n    name: "Minecraft",\n    releaseYear: 2011,\n    sales: 20\n  }\n]\n//hide-end\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to the H2O Game shop</h1>\n      <div>{games.map((game: Game) => {\n        return <React.Fragment key={game.id}>\n              <h2>{game.name} ({game.releaseYear})</h2>\n              <p>Aantal keer verkocht: {game.sales}</p>\n            </React.Fragment>\n      })}\n      </div>\n    </div>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n'})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsx)(n.p,{children:"Deze applicatie is niet erg interactief, dus je zou ze als statische HTML-pagina kunnen schrijven. Uitgebreidere code zou de lijst met games uit een database kunnen inladen of zou het mogelijk maken games toe te voegen,..."})]}),"\n",(0,r.jsx)(n.p,{children:"De lijst met games is een deel van de website dat als \xe9\xe9n geheel beschouwd kan worden. Daarom is het zinvol deze af te zonderen in een component. We noemen deze List:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',children:'//hide-start\nimport React from "react";\n\ninterface Game {\n  id: number\n  name: string,\n  releaseYear: number,\n  sales: number\n}\n\nconst games : Game[] = [\n  {\n    id: 0,\n    name: "World of Warcraft",\n    releaseYear: 2004,\n    sales: 5\n  },\n  {\n    id: 1,\n    name: "Valheim",\n    releaseYear: 2021,\n    sales: 10\n  },\n  {\n    id: 2,\n    name: "Minecraft",\n    releaseYear: 2011,\n    sales: 20\n  }\n]\n//hide-end\nconst List = () => {\n  return (\n    <div>\n    {games.map((game: Game) => {\n        return <React.Fragment key={game.id}>\n              <h2>{game.name} ({game.releaseYear})</h2>\n              <p>Aantal keer verkocht: {game.sales}</p>\n            </React.Fragment>\n      })}\n    </div>\n  );\n}\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Welcome to the H2O Game shop</h1>\n      <List/>\n    </div>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n'})}),"\n",(0,r.jsx)(n.p,{children:"Een component is hier geschreven als functie die TSX teruggeeft als returnwaarde. We hebben deze TSX verplaatst van de App component naar de List component."}),"\n",(0,r.jsxs)(n.p,{children:["De component gebruiken in App kan door hem te behandelen als een HTML-tag. Daarom staat er ",(0,r.jsx)(n.code,{children:"<List />"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);