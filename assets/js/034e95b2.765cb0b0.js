"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[9375],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var a=r(96540);const t={},s=a.createContext(t);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},30797:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"wf-course/typescript-revisited/arrays-objecten-kopieren","title":"Arrays/Objecten kopieren","description":"Spread operator","source":"@site/docs/wf-course/typescript-revisited/arrays-objecten-kopieren.md","sourceDirName":"wf-course/typescript-revisited","slug":"/wf-course/typescript-revisited/arrays-objecten-kopieren","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/arrays-objecten-kopieren","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"wfCourse","previous":{"title":"TypeScript Revisited","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/"},"next":{"title":"Omgaan met null/undefined","permalink":"/webframeworks-cursus/wf-course/typescript-revisited/optional-chaining"}}');var t=r(74848),s=r(28453);const o={sidebar_position:1},i="Arrays/Objecten kopieren",d={},c=[{value:"Spread operator",id:"spread-operator",level:3},{value:"Objecten kopi\xebren",id:"objecten-kopi\xebren",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"arraysobjecten-kopieren",children:"Arrays/Objecten kopieren"})}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator",children:"Spread operator"}),"\n",(0,t.jsx)(n.p,{children:"Het is vaak nodig in deze cursus om kopie\xebn te maken van arrays. Je zou misschien denken dat de volgende code een kopie van een array maakt"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let array : number[] = [1,2,3,4];\nlet newArray : number[] = array;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["maar niets is minder waar! In de code hierboven wordt gewoon de referentie naar ",(0,t.jsx)(n.code,{children:"array"})," toegewezen aan de variabele ",(0,t.jsx)(n.code,{children:"newArray"}),". ",(0,t.jsx)(n.code,{children:"array"})," en ",(0,t.jsx)(n.code,{children:"newArray"})," verwijzen gewoon naar dezelfde plaats in het geheugen. Het onderstaande voorbeeld toont dit aan:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let array : number[] = [1,2,3,4];\nlet newArray : number[] = array;\n\nnewArray.push(5);\nconsole.log(array); // 1,2,3,4,5\nconsole.log(newArray); // 1,2,3,4,5\n"})}),"\n",(0,t.jsx)(n.p,{children:"Als je een kopie van een array moet maken dan ga je gebruik moeten maken van de spread syntax (drie puntjes)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let array : number[] = [1,2,3,4];\nlet newArray : number[] = [...array];\n\nnewArray.push(5);\nconsole.log(array); // 1,2,3,4\nconsole.log(newArray); // 1,2,3,4,5\n"})}),"\n",(0,t.jsx)(n.p,{children:"Beide verwijzen nu naar een aparte plaats in het geheugen."}),"\n",(0,t.jsx)(n.h3,{id:"objecten-kopi\xebren",children:"Objecten kopi\xebren"}),"\n",(0,t.jsx)(n.p,{children:"Het bovenstaande geldt ook voor objecten: "}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let andie = { name: 'Andie Similon', age: 37 };\nlet clone = andie;\n\nclone.name = 'Clone Similon';\n\nconsole.log(andie); // Clone Similon\nconsole.log(clone); // Clone Similon\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let andie = { name: 'Andie Similon', age: 37 };\nlet clone = {...andie};\n\nclone.name = 'Clone Similon';\n\nconsole.log(andie); // Andie Similon\nconsole.log(clone); // Clone Similon\n"})}),"\n",(0,t.jsx)(n.p,{children:"Het is wel belangrijk dat je weet dat je hiermee enkel objecten kan kopi\xebren met 1 niveau diep."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let address = { street: '123 fakestreet' };\nlet andie = { name: 'Andie Similon', age: 37, address: address };\nlet clone = { ...andie };\n\nclone.name = 'Clone Similon';\nclone.address.street = '234 fakestreet';\n\nconsole.log(andie.address.street); // 234 fakestreet\nconsole.log(clone.address.street); // 234 fakestreet\n"})}),"\n",(0,t.jsx)(n.p,{children:"Beide address velden wijzen naar hetzelfde object. "}),"\n",(0,t.jsxs)(n.p,{children:["Het kopi\xebren van objecten van meerdere niveau's diep noemen ze vaak een ",(0,t.jsx)(n.strong,{children:"'deep copy'"})," van het object. De beste manier om dit te doen is momenteel door eerst het object om te zetten naar een JSON-string en dan direct terug om te zetten naar een object:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"let address = { street: '123 fakestreet' };\nlet andie = { name: 'Andie Similon', age: 37, address: address };\nlet clone = JSON.parse(JSON.stringify(andie));\n\nclone.name = 'Clone Similon';\nclone.address.street = '234 fakestreet';\n\nconsole.log(andie.address.street); // 123 Fakestreet\nconsole.log(clone.address.street); // 234 Fakestreet\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);