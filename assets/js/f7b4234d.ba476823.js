"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[740],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,v=c["".concat(p,".").concat(m)]||c[m]||u[m]||l;return t?a.createElement(v,i(i({ref:n},d),{},{components:t})):a.createElement(v,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:8},i="Event Handling",o={unversionedId:"wf-course/event-handling/README",id:"wf-course/event-handling/README",title:"Event Handling",description:"Text Input",source:"@site/docs/wf-course/event-handling/README.md",sourceDirName:"wf-course/event-handling",slug:"/wf-course/event-handling/",permalink:"/webframeworks-cursus/wf-course/event-handling/",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"wfCourse",previous:{title:"Styling",permalink:"/webframeworks-cursus/wf-course/componenten/stylen"},next:{title:"State",permalink:"/webframeworks-cursus/wf-course/state/"}},p={},s=[{value:"Text Input",id:"text-input",level:2},{value:"Checkbox",id:"checkbox",level:2},{value:"Select",id:"select",level:2}],d={toc:s};function u(e){let{components:n,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"event-handling"},"Event Handling"),(0,r.kt)("h2",{id:"text-input"},"Text Input"),(0,r.kt)("p",null,"We gaan nu eens kijken hoe we onze applicatie iets interactiever kunnen maken door de hand van form elementen en event handling. We gaan nu een nieuwe component introduceren genaamd InputView. Deze staat toe een naam en een jaartal in te vullen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nconst styles = {\n    inputFields: {\n        display: "grid", gridTemplateColumns: "70px 200px"\n    }\n}\n//hide-end\nconst InputView = () => {\n  return (\n    <div>\n      <div style={styles.inputFields}>\n        <label htmlFor="name">name:</label>\n        <input type="text" id="name" />\n        <label htmlFor="year">year:</label>\n        <input type="number" id="year" name="year" min="1900" max="2021" />\n      </div>\n      <input type="button" id="submit" value="Add Movie" />\n    </div>\n  )\n}\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,r.kt)("p",null,"Hier hebben we \xe9\xe9n tekstveld voor de naam van de film en een numeriek invoerveld voor het jaartal. We zetten hier een maximum 2021 en een minimum van 1900. Tot nu toe wordt er nog niets gedaan met deze invoervelden. "),(0,r.kt)("p",null,"Om hier iets mee te doen, maken we een functie om iets te doen wanneer er iets ingetypt wordt in het invoerveld. Dit soort functie is een event listener. Verderop in de code zullen we er voor zorgen dat deze functie loopt zodra een bepaald type gebeurtenis (event) zich voordoet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nconst styles = {\n    inputFields: {\n        display: "grid", gridTemplateColumns: "70px 200px"\n    }\n}\n//hide-end\nconst handleChange = (event) => {\n  console.log(event.target.value);\n}\n//hide-start\nconst InputView = () => {\n  return (\n    <div>\n      <div style={styles.inputFields}>\n        <label htmlFor="name">name:</label>\n        <input type="text" id="name" onChange={handleChange} />\n        <label htmlFor="year">year:</label>\n        <input type="number" id="year" name="year" min="1900" max="2021" />\n      </div>\n      <input type="button" id="submit" value="Add Movie" />\n    </div>\n  )\n}\n//hide-end\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,r.kt)("p",null,"We kunnen de gewenste interface van de handleChange functie hierboven te weten komen door de muis over de onChange property te plaatsen. Je krijgt dan iets gelijkaardig aan:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Change Event Handler",src:t(3019).Z,width:"1126",height:"128"})),(0,r.kt)("p",null,"We kunnen nu de signatuur ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChange")," aanpassen om de waarschuwing van hierboven op te lossen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nconst styles = {\n    inputFields: {\n        display: "grid", gridTemplateColumns: "70px 200px"\n    }\n}\n//hide-end\nconst handleChange : React.ChangeEventHandler<HTMLInputElement> = (event) => {\n  console.log(event.target.value);\n}\n//hide-start\nconst InputView = () => {\n  return (\n    <div>\n      <div style={styles.inputFields}>\n        <label htmlFor="name">name:</label>\n        <input type="text" id="name" onChange={handleChange} />\n        <label htmlFor="year">year:</label>\n        <input type="number" id="year" name="year" min="1900" max="2021" />\n      </div>\n      <input type="button" id="submit" value="Add Movie" />\n    </div>\n  )\n}\n//hide-end\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,r.kt)("p",null,"We kunnen op dezelfde manier een functie maken om een click af te handelen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nconst styles = {\n    inputFields: {\n        display: "grid", gridTemplateColumns: "70px 200px"\n    }\n}\nconst handleChange : React.ChangeEventHandler<HTMLInputElement> = (event) => {\n  console.log(event.target.value);\n}\n//hide-end\nconst handleClick : React.MouseEventHandler<HTMLInputElement> = (event) => {\n  console.log("button clicked");\n}\n//hide-start\nconst InputView = () => {\n  return (\n    <div>\n      <div style={styles.inputFields}>\n        <label htmlFor="name">name:</label>\n        <input type="text" id="name" onChange={handleChange} />\n        <label htmlFor="year">year:</label>\n        <input type="number" id="year" name="year" min="1900" max="2021" onChange={handleChange}/>\n      </div>\n      <input type="button" id="submit" value="Add Movie" onClick={handleClick}/>\n    </div>\n  )\n}\n//hide-end\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,r.kt)("p",null,"Het is ook mogelijk om de event handlers op te geven een anonieme handler functie:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{6,8,10} codesandbox={"template": "react", "filename": "src/App.tsx"}',"{6,8,10}":!0,codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'//hide-start\nconst styles = {\n    inputFields: {\n        display: "grid", gridTemplateColumns: "70px 200px"\n    }\n}\n//hide-end\nconst InputView = () => {\n  return (\n    <div>\n      <div style={styles.inputFields}>\n        <label htmlFor="name">name:</label>\n        <input type="text" id="name" onChange={(event) => { console.log(event.target.value); }}/>\n        <label htmlFor="year">year:</label>\n        <input type="number" id="year" name="year" min="1900" max="2021" onChange={(event) => { console.log(event.target.value); }}/>\n      </div>\n      <input type="button" id="submit" value="Add Movie" onClick={(event) => { console.log("button clicked");}}/>\n    </div>\n  )\n}\n//hide-start\nconst App = () => {\n    return <InputView/>\n}\n\nexport default App;\n//hide-end\n')),(0,r.kt)("p",null,"Hier ben je niet verplicht een type mee te geven omdat hij zelf het type kan afleiden. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In HTML is er een verschil tussen een input en een change event. Bij React is dit niet het geval. Beide triggeren bij elke wijziging aan het input veld. ")),(0,r.kt)("h2",{id:"checkbox"},"Checkbox"),(0,r.kt)("p",null,"Checkbox werkt zeer gelijkaardig aan de andere input elementen. We gebruiken hier ook een onChange handler."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'const App = () => {\n    return (\n      <>\n        <label>\n        <input\n          type="checkbox"\n          onChange={(event) => console.log(event.target.checked)}\n        />\n        Toggle\n      </label>\n      </>\n    )\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Het type van deze handler is ook ",(0,r.kt)("inlineCode",{parentName:"p"},"\nReact.ChangeEventHandler<HTMLInputElement>")),(0,r.kt)("h2",{id:"select"},"Select"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'codesandbox={"template": "react", "filename": "src/App.tsx"}',codesandbox:'{"template":','"react",':!0,'"filename":':!0,'"src/App.tsx"}':!0},'const App = () => {\n    return (\n      <>\n        <label htmlFor="cars">Choose a car:</label>\n        <select id="cars" name="cars" onChange={(event) => console.log(event.target.value)}>\n          <option value="volvo">Volvo</option>\n          <option value="saab">Saab</option>\n          <option value="fiat">Fiat</option>\n          <option value="audi">Audi</option>\n        </select>\n      </>\n    )\n}\n\nexport default App;\n')),(0,r.kt)("p",null,"Deze handler heeft het type ",(0,r.kt)("inlineCode",{parentName:"p"},"React.ChangeEventHandler<HTMLSelectElement>")))}u.isMDXComponent=!0},3019:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/changeeventhandler-fbae435d18a84b5022f1eb9b076eea34.png"}}]);