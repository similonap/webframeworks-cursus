"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[6485],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),v=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=v(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),g=v(t),m=i,d=g["".concat(s,".").concat(m)]||g[m]||p[m]||r;return t?a.createElement(d,o(o({ref:n},l),{},{components:t})):a.createElement(d,o({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var v=2;v<r;v++)o[v]=t[v];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7831:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>v});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:1},o="Stack Navigation",c={unversionedId:"react-native-course/navigation/stack-navigation",id:"react-native-course/navigation/stack-navigation",title:"Stack Navigation",description:"React Navigation ondersteunt verschillende navigatie stijlen. De meest eenvoudige is de Stack Navigator. Deze navigatie stijl is vergelijkbaar met de browser history. De gebruiker kan door de verschillende schermen navigeren en kan terug gaan naar de vorige schermen.",source:"@site/docs/react-native-course/navigation/stack-navigation.md",sourceDirName:"react-native-course/navigation",slug:"/react-native-course/navigation/stack-navigation",permalink:"/webframeworks-cursus/react-native-course/navigation/stack-navigation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"reactNative",previous:{title:"Routing en navigatie",permalink:"/webframeworks-cursus/react-native-course/navigation/"},next:{title:"Drawer Navigation",permalink:"/webframeworks-cursus/react-native-course/navigation/drawer-navigation"}},s={},v=[{value:"Eerste schermen",id:"eerste-schermen",level:2},{value:"Titel Veranderen",id:"titel-veranderen",level:2},{value:"Doorgeven van props",id:"doorgeven-van-props",level:2},{value:"Navigeren",id:"navigeren",level:2},{value:"navigate",id:"navigate",level:3},{value:"push",id:"push",level:3},{value:"replace",id:"replace",level:3},{value:"goBack",id:"goback",level:3},{value:"Parameters doorgeven",id:"parameters-doorgeven",level:2},{value:"Header styling",id:"header-styling",level:2}],l={toc:v};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stack-navigation"},"Stack Navigation"),(0,i.kt)("p",null,"React Navigation ondersteunt verschillende navigatie stijlen. De meest eenvoudige is de Stack Navigator. Deze navigatie stijl is vergelijkbaar met de browser history. De gebruiker kan door de verschillende schermen navigeren en kan terug gaan naar de vorige schermen."),(0,i.kt)("p",null,"Als we de stack navigator willen gebruiken moeten we deze ook nog apart installeren:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @react-navigation/native-stack\n")),(0,i.kt)("h2",{id:"eerste-schermen"},"Eerste schermen"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createStackNavigator")," is een functie die een object teruggeeft met twee properties: ",(0,i.kt)("inlineCode",{parentName:"li"},"Screen")," en ",(0,i.kt)("inlineCode",{parentName:"li"},"Navigator"),". We gebruiken deze properties om een stack navigator te maken."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NavigationContainer")," is een component die we gebruiken om de stack navigator te renderen. Alle ",(0,i.kt)("inlineCode",{parentName:"li"},"Navigator")," en ",(0,i.kt)("inlineCode",{parentName:"li"},"Screen")," componenten moeten binnen dit component zitten.")),(0,i.kt)("p",null,"Hieronder een voorbeeld met 1 ",(0,i.kt)("inlineCode",{parentName:"p"},"Screen")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'import * as React from "react";\nimport { View, Text } from "react-native";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,i.kt)("p",null,"Als we een tweede Screen willen toevoegen moeten we deze er gewoon bijzetten. Het eerste scherm is altijd het scherm dat wordt getoond als de app wordt gestart."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'//hide-start\nimport * as React from "react";\nimport { View, Text } from "react-native";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n//hide-end\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen} />\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,i.kt)("h2",{id:"titel-veranderen"},"Titel Veranderen"),(0,i.kt)("p",null,"De titel van een scherm kan worden veranderd door de ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," property van het ",(0,i.kt)("inlineCode",{parentName:"p"},"Screen")," component te gebruiken. De titel wordt getoond in de navigatiebalk."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'//hide-start\nimport * as React from "react";\nimport { View, Text } from "react-native";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n//hide-end\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen} options={{title: "Overview"}}/>\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,i.kt)("h2",{id:"doorgeven-van-props"},"Doorgeven van props"),(0,i.kt)("p",null,"Soms willen we properties doorgeven aan een scherm. We geven dan niet meer de component door als prop maar een functie die een component teruggeeft. Deze functie krijgt als argument de properties die we hebben doorgegeven."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'import * as React from "react";\nimport { View, Text } from "react-native";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = ({colors}: {colors: string[]}) => {\n  return (\n    <View style={{ flex: 1, alignItems: "stretch", justifyContent: "center" }}>\n      {colors.map((color) => <View style={{backgroundColor: color, flex: 1}}></View>)}\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  let colors : string[] = ["red", "green", "blue"]; \n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home">\n            {props => <HomeScreen {...props} colors={colors} />}\n        </Stack.Screen>\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,i.kt)("h2",{id:"navigeren"},"Navigeren"),(0,i.kt)("p",null,"Hiervoor gebruiken we de ",(0,i.kt)("inlineCode",{parentName:"p"},"useNavigation")," hook. Deze hook geeft ons een object waarmee we kunnen navigeren. "),(0,i.kt)("h3",{id:"navigate"},"navigate"),(0,i.kt)("p",null,"We kunnen dan de ",(0,i.kt)("inlineCode",{parentName:"p"},"navigate")," functie gebruiken om naar een andere scherm te navigeren. We geven de naam van het scherm mee als argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'import * as React from "react";\nimport { View, Text, Button } from "react-native";\nimport { NavigationContainer, useNavigation } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  const navigation : any = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: "stretch", justifyContent: "center" }}>\n      <Button title="Detail" onPress={() => navigation.navigate("Detail")}/>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen}/>\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We gebruiken hier een ",(0,i.kt)("inlineCode",{parentName:"p"},"any")," als type. Het type systeem van React Navigation is behoorlijk complex, daarom hebben we besloten dat we dit hier niet gaan behandelen. Als je meer wilt weten over het type systeem van React Navigation, dan kun je ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/typescript/"},"hier")," meer informatie vinden.")),(0,i.kt)("h3",{id:"push"},"push"),(0,i.kt)("p",null,"We kunnen ook de ",(0,i.kt)("inlineCode",{parentName:"p"},"push")," functie gebruiken om naar een andere scherm te navigeren. Het grote verschil is dat je met push twee keer hetzelfde scherm achter elkaar kunt pushen. Bij navigate gaat hij altijd eerst kijken of die niet al op de stack staat."),(0,i.kt)("h3",{id:"replace"},"replace"),(0,i.kt)("p",null,"Als je een scherm wilt vervangen door een ander scherm, dan kun je de ",(0,i.kt)("inlineCode",{parentName:"p"},"replace")," functie gebruiken. Deze functie verwijdert het huidige scherm en plaatst het nieuwe scherm op de stack."),(0,i.kt)("p",null,"Er zal geen back knop verschijnen als je een scherm vervangt."),(0,i.kt)("h3",{id:"goback"},"goBack"),(0,i.kt)("p",null,"Als je wilt terug gaan naar het vorige scherm, dan kun je de ",(0,i.kt)("inlineCode",{parentName:"p"},"goBack")," functie gebruiken. Deze functie verwijdert het huidige scherm en plaatst het vorige scherm op de stack."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'import * as React from "react";\nimport { View, Text, Button } from "react-native";\nimport { NavigationContainer, useNavigation } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  const navigation : any = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: "stretch", justifyContent: "center" }}>\n      <Button title="Detail" onPress={() => navigation.navigate("Detail")}/>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen}/>\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,i.kt)("p",null,"Wil je teruggaan naar een specifiek scherm dan gebruik je best gewoon terug ",(0,i.kt)("inlineCode",{parentName:"p"},"navigate"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"popToTop")," is een functie die je gebruikt om terug te gaan naar het eerste scherm van de stack."),(0,i.kt)("h2",{id:"parameters-doorgeven"},"Parameters doorgeven"),(0,i.kt)("p",null,"We kunnen parameters doorgeven aan een scherm. Dit doen we door een object mee te geven aan de ",(0,i.kt)("inlineCode",{parentName:"p"},"navigate")," functie. We kunnen deze parameters dan opvragen in het scherm waar we naartoe navigeren met de ",(0,i.kt)("inlineCode",{parentName:"p"},"useRoute")," hook."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'{10-12,18,23} expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',"{10-12,18,23}":!0,expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'import * as React from "react";\nimport { View, Text, Button } from "react-native";\nimport { NavigationContainer, useNavigation, useRoute } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  const navigation : any = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: "stretch", justifyContent: "center" }}>\n      <Button title="Detail 1" onPress={() => navigation.navigate("Detail", {id: 1})}/>\n      <Button title="Detail 2" onPress={() => navigation.navigate("Detail", {id: 2})}/>\n      <Button title="Detail 3" onPress={() => navigation.navigate("Detail", {id: 3})}/>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  const route: RouteProp<any> = useRoute();\n\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n      <Text>{route.params?.id}</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen}/>\n        <Stack.Screen name="Detail" component={DetailScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default App;\n')),(0,i.kt)("h2",{id:"header-styling"},"Header styling"),(0,i.kt)("p",null,"We kunnen de header van een scherm aanpassen door de ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," property van het scherm te gebruiken. We kunnen hier een object meegeven met de volgende properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headerStyle"),": hier kan je bijvoorbeeld de achtergrondkleur van de header aanpassen."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headerTintColor"),": hier kan je de kleur van de titel en de knoppen aanpassen."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headerTitleStyle"),": hier kan je de stijl van de titel aanpassen. Als we bijvoorbeeld de ",(0,i.kt)("inlineCode",{parentName:"li"},"fontFamily"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fontWeight")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"fontSize")," willen aanpassen, dan kunnen we dit hier doen.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'//hide-start\nimport * as React from "react";\nimport { View, Text } from "react-native";\nimport { NavigationContainer } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n//hide-end\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name="Home" component={HomeScreen} options={{\n            headerStyle: {\n                backgroundColor: "red",\n            },\n            headerTintColor: "#fff",\n            headerTitleStyle: {\n                fontWeight: "bold",\n            }\n        }}/>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')),(0,i.kt)("p",null,"Wil je ineens de header van alle schermen aanpassen, dan kan je dat doen door een ",(0,i.kt)("inlineCode",{parentName:"p"},"screenOptions")," property mee te geven aan de ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack.Navigator"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'expo={"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}',expo:'{"dependencies":"@react-navigation/native-stack,react-native-screens,react-native-safe-area-context,@react-navigation/native"}'},'//hide-start\nimport * as React from "react";\nimport { View, Text,Button} from "react-native";\nimport { NavigationContainer, useNavigation } from "@react-navigation/native";\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\n\nconst HomeScreen = () => {\n  const navigation : any = useNavigation();\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Home Screen</Text>\n      <Button title="Details" onPress={() => navigation.navigate("Detail") }/>\n    </View>\n  );\n}\n\nconst DetailScreen = () => {\n  return (\n    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>\n      <Text>Detail Screen</Text>\n    </View>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n//hide-end\nconst App = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{\n            headerStyle: {\n                backgroundColor: "red",\n            },\n            headerTintColor: "#fff",\n            headerTitleStyle: {\n                fontWeight: "bold",\n            }\n        }}>\n        <Stack.Screen name="Home" component={HomeScreen}/>\n        <Stack.Screen name="Detail" component={DetailScreen}/>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n//hide-start\nexport default App;\n//hide-end\n')))}p.isMDXComponent=!0}}]);