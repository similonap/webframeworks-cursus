"use strict";(self.webpackChunkwebframeworks_cursus=self.webpackChunkwebframeworks_cursus||[]).push([[5416],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(k,i(i({ref:n},d),{},{components:t})):a.createElement(k,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},2590:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const o={sidebar_position:9},i="Expo Router",l={unversionedId:"react-native-course/expo-router/README",id:"react-native-course/expo-router/README",title:"Expo Router",description:"Expo Router werkt zeer gelijkaardig aan de routing in next.js. Het is een file-based router. Dit wil zeggen dat je een mapstructuur aanmaakt en dat je op basis van de bestandsnaam de route bepaalt. Het laat toe om navigatie tussen schermen in je app te beheren, waardoor gebruikers naadloos tussen verschillende delen van de UI van je app kunnen bewegen, met behulp van dezelfde componenten op meerdere platforms (Android, iOS en web).",source:"@site/docs/react-native-course/expo-router/README.md",sourceDirName:"react-native-course/expo-router",slug:"/react-native-course/expo-router/",permalink:"/webframeworks-cursus/react-native-course/expo-router/",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"reactNative",previous:{title:"Controlled Components",permalink:"/webframeworks-cursus/react-native-course/controlled-components/"},next:{title:"Extra",permalink:"/webframeworks-cursus/react-native-course/extra/"}},p={},s=[{value:"Installatie",id:"installatie",level:2},{value:"Nieuw project",id:"nieuw-project",level:3},{value:"Bestaand project",id:"bestaand-project",level:3},{value:"Packages installeren",id:"packages-installeren",level:4},{value:"Package.json aanpassen",id:"packagejson-aanpassen",level:4},{value:"App.js aanpassen",id:"appjs-aanpassen",level:4},{value:"babel.config.js aanpassen",id:"babelconfigjs-aanpassen",level:4},{value:"Schermen toevoegen",id:"schermen-toevoegen",level:2},{value:"Het eerste scherm",id:"het-eerste-scherm",level:3},{value:"Nog een scherm toevoegen",id:"nog-een-scherm-toevoegen",level:3},{value:"Dynamische routes",id:"dynamische-routes",level:3},{value:"Navigeren tussen schermen",id:"navigeren-tussen-schermen",level:2},{value:"Imperatief navigeren",id:"imperatief-navigeren",level:3},{value:"Dynamische routes linken",id:"dynamische-routes-linken",level:3},{value:"Route vervangen",id:"route-vervangen",level:3}],d={toc:s};function u(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"expo-router"},"Expo Router"),(0,r.kt)("p",null,"Expo Router werkt zeer gelijkaardig aan de routing in next.js. Het is een file-based router. Dit wil zeggen dat je een mapstructuur aanmaakt en dat je op basis van de bestandsnaam de route bepaalt. Het laat toe om navigatie tussen schermen in je app te beheren, waardoor gebruikers naadloos tussen verschillende delen van de UI van je app kunnen bewegen, met behulp van dezelfde componenten op meerdere platforms (Android, iOS en web)."),(0,r.kt)("p",null,"Het is gebouwd op ",(0,r.kt)("a",{parentName:"p",href:"https://reactnavigation.org/"},"React Navigation"),", een populaire library voor het beheren van navigatie in React Native apps."),(0,r.kt)("h2",{id:"installatie"},"Installatie"),(0,r.kt)("p",null,"Als je expo-router wil gebruiken in je project moet je eerst enkele packages installeren en een aantal bestanden aanpassen. Deze stappen worden hieronder uitgelegd. "),(0,r.kt)("h3",{id:"nieuw-project"},"Nieuw project"),(0,r.kt)("p",null,"Als je nog geen project hebt kan je een nieuw project aanmaken met een template en hoef je geen ingewikkelde installatie te doen. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app my-project --template expo-template-typescript-router\n")),(0,r.kt)("p",null,"Je moet nog wel de ",(0,r.kt)("inlineCode",{parentName:"p"},"scheme")," property aanpassen in je ",(0,r.kt)("inlineCode",{parentName:"p"},"app.json")," (zie verder)."),(0,r.kt)("h3",{id:"bestaand-project"},"Bestaand project"),(0,r.kt)("h4",{id:"packages-installeren"},"Packages installeren"),(0,r.kt)("p",null,"Installeer de library in je project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar react-native-gesture-handler react-native-web react-dom @react-navigation/drawer react-native-reanimated\n")),(0,r.kt)("h4",{id:"packagejson-aanpassen"},"Package.json aanpassen"),(0,r.kt)("p",null,"Pas de ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," property in je ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," aan:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "main": "expo-router/entry"\n}\n')),(0,r.kt)("h4",{id:"appjs-aanpassen"},"App.js aanpassen"),(0,r.kt)("p",null,"Pas je ",(0,r.kt)("inlineCode",{parentName:"p"},"App.js")," aan:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'{\n  ...\n  "scheme": "your-app-scheme"\n  ...\n  "web": {\n    ...\n    "bundler": "metro"\n  }\n}\n')),(0,r.kt)("p",null,"Je moet de ",(0,r.kt)("inlineCode",{parentName:"p"},"scheme")," property aanpassen naar een unieke naam voor je app. Dit is nodig voor deep linking. Je kan hier bijvoorbeeld de naam van je app voor gebruiken. Je moet er wel voor zorgen dat deze naam uniek is. "),(0,r.kt)("h4",{id:"babelconfigjs-aanpassen"},"babel.config.js aanpassen"),(0,r.kt)("p",null,"Je moet de ",(0,r.kt)("inlineCode",{parentName:"p"},"babel.config.js")," aanpassen zodat ",(0,r.kt)("inlineCode",{parentName:"p"},"expo-router")," en ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-reanimated")," correct werken. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"module.exports = function (api) {\n  ...\n  return {\n    ...\n    plugins: ['expo-router/babel','react-native-reanimated/plugin'],\n  };\n};\n")),(0,r.kt)("h2",{id:"schermen-toevoegen"},"Schermen toevoegen"),(0,r.kt)("p",null,"Als een bestand wordt aangemaakt in de ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," directory, wordt het automatisch een route in de app. Bijvoorbeeld, de volgende bestanden zullen de volgende routes maken:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app/index.js")," komt overeen met ",(0,r.kt)("inlineCode",{parentName:"li"},"/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app/home.js")," komt overeen met ",(0,r.kt)("inlineCode",{parentName:"li"},"/home")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app/settings/index.js")," komt overeen met ",(0,r.kt)("inlineCode",{parentName:"li"},"/settings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"app/[user].js")," komt overeen met dynamische paden zoals ",(0,r.kt)("inlineCode",{parentName:"li"},"/expo")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"/joske"))),(0,r.kt)("p",null,"Deze paden kunnen worden gebruikt in de ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," component om te navigeren naar een bepaald scherm. Als je de applicatie op een webbrowser opent, kan je ook de URL aanpassen om naar een bepaald scherm te navigeren."),(0,r.kt)("h3",{id:"het-eerste-scherm"},"Het eerste scherm"),(0,r.kt)("p",null,"Als je nu de applicatie opstart met ",(0,r.kt)("inlineCode",{parentName:"p"},"expo start")," dan krijg je de volgende pagina te zien:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Alt text",src:t(8371).Z,width:"1254",height:"724"})),(0,r.kt)("p",null,"Zoals de melding aangeeft moet je een directory ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," aanmaken met daarin een bestand ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx"),". Dit bestand wordt gebruikt als eerste scherm van je applicatie. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { View, StyleSheet, Text } from "react-native";\n\nconst App = () => {\n    return (\n        <View style={styles.container}>\n            <Text>Home Screen</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: "center",\n        alignItems: "center"\n    }\n})\n\nexport default App;\n')),(0,r.kt)("p",null,"Als je dan de applicatie opnieuw opstart zal de home pagina getoond worden."),(0,r.kt)("h3",{id:"nog-een-scherm-toevoegen"},"Nog een scherm toevoegen"),(0,r.kt)("p",null,"Willen we een tweede scherm toevoegen voor een bepaalde route dan maken we een bestand aan in de ",(0,r.kt)("inlineCode",{parentName:"p"},"app")," directory met de naam van de route. Bijvoorbeeld ",(0,r.kt)("inlineCode",{parentName:"p"},"app/about.tsx")," voor de route ",(0,r.kt)("inlineCode",{parentName:"p"},"/about"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\n\nimport { View, StyleSheet, Text } from "react-native";\n\nconst About = () => {\n    return (\n        <View style={styles.container}>\n            <Text>About Screen</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: "center",\n        alignItems: "center"\n    }\n})\n\nexport default About;\n')),(0,r.kt)("h3",{id:"dynamische-routes"},"Dynamische routes"),(0,r.kt)("p",null,"Je kan ook dynamische routes maken. Dit doe je door een bestand aan te maken met de naam van de route en tussen vierkante haken de naam van de parameter. Bijvoorbeeld ",(0,r.kt)("inlineCode",{parentName:"p"},"app/users/[name].tsx")," voor de route ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/expo")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/joske"),". "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useLocalSearchParams } from "expo-router";\nimport React from "react";\nimport { View, StyleSheet, Text } from "react-native";\n\nconst User = () => {\n    const { name } = useLocalSearchParams<{name: string}();\n    return (\n        <View style={styles.container}>\n            <Text>User : { name }</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        justifyContent: "center",\n        alignItems: "center"\n    }\n})\n\nexport default User;\n')),(0,r.kt)("h2",{id:"navigeren-tussen-schermen"},"Navigeren tussen schermen"),(0,r.kt)("p",null,"Expo Router gebruikt het ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," component om te navigeren tussen schermen. Dit component heeft een ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," property die de route bepaalt. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Link href="/about">About</Link>\n')),(0,r.kt)("p",null,"Het Link component wrapt de children in een ",(0,r.kt)("inlineCode",{parentName:"p"},"<Text>")," component. Dit is handig voor accessibility maar niet altijd gewenst. Je kan het component aanpassen door de ",(0,r.kt)("inlineCode",{parentName:"p"},"asChild")," property te gebruiken. Deze property zal alle props doorgeven aan het eerste child van het Link component. Het child component moet de ",(0,r.kt)("inlineCode",{parentName:"p"},"onPress")," en ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," props ondersteunen. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Link href="/about" asChild>\n  <Button title="About" />\n</Link>\n')),(0,r.kt)("p",null,"of gebruik makende van de ",(0,r.kt)("inlineCode",{parentName:"p"},"Pressable")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Link href="/about" asChild>\n  <Pressable>\n    <Text>About</Text>\n  </Pressable>\n</Link>\n')),(0,r.kt)("h3",{id:"imperatief-navigeren"},"Imperatief navigeren"),(0,r.kt)("p",null,"Je kan ook imperatief (via programma code) navigeren. Bijvoorbeeld als je een formulier hebt en je wil na het indienen van het formulier naar een andere pagina navigeren. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { router } from 'expo-router';\n...\nrouter.replace(\"/about\");\n...\n")),(0,r.kt)("p",null,"Op het router object kan je de volgende methodes gebruiken:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"push")," : voegt een nieuwe pagina toe aan de navigatie stack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"replace")," : vervangt de huidige pagina in de navigatie stack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"back")," : gaat terug naar de vorige pagina in de navigatie stack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"canGoBack"),": geeft aan of er een vorige pagina is in de navigatie stack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setParams"),": verandert de parameters van de huidige pagina in de navigatie stack")),(0,r.kt)("h3",{id:"dynamische-routes-linken"},"Dynamische routes linken"),(0,r.kt)("p",null,"Je kan dynamische router linken door zelf de route aan te maken door concatenatie van de route en de parameters. Of je kan hiervoor het ",(0,r.kt)("inlineCode",{parentName:"p"},"Href")," object gebruiken. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<Link\n  href={{\n    pathname: \"/users/[name]\",\n    params: { name: 'bacon' }\n  }}>\n    View user\n</Link>\n")),(0,r.kt)("h3",{id:"route-vervangen"},"Route vervangen"),(0,r.kt)("p",null,"Per default worden routes toegevoegd aan de navigatie stack. Dit betekent dat de vorige pagina beschikbaar is als de gebruiker terug navigeert. Je kan de ",(0,r.kt)("inlineCode",{parentName:"p"},"replace")," property gebruiken om de huidige pagina te vervangen in plaats van een nieuwe toe te voegen. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Link href="/about" replace>\n  <Text>About</Text>\n</Link>\n')))}u.isMDXComponent=!0},8371:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/initial-60b10cb3bb0d0d22bf037f99aa71ebf5.png"}}]);